name: Build Dawn

on:
  workflow_dispatch:
  workflow_call:

jobs:
#  build_windows_x64:
#    name: Build Windows x64
#    runs-on: windows-latest
#    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.12.1
#        with:
#          access_token: ${{ github.token }}
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: "corretto"
#          java-version: 17
#
#      - name: Set up MinGW
#        uses: msys2/setup-msys2@v2
#
#      - name: Set up Developer Command Prompt
#        uses: TheMrMilchmann/setup-msvc-dev@v3
#        with:
#          arch: x64
#
#      - name: Append the directory of 'vcvarsall.bat' to PATH environment variable
#        uses: myci-actions/export-env-var-powershell@1
#        with:
#          name: PATH
#          value: $env:PATH;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build
#
#      - name: Download sources
#        run: ./gradlew :webgpu:webgpu-dawn:download_source
#
#      - name: Generate x64 static
#        run: ./gradlew :webgpu:webgpu-dawn:generateCMake_windows_x64_static
#
#      - name: Build x64 static
#        run: ./gradlew :webgpu:webgpu-dawn:build_windows_x64
#
#      - name: Upload x64 static
#        uses: actions/upload-artifact@v4
#        with:
#          name: windows_x64_static
#          path: ./webgpu/webgpu-dawn/build/dawn/install/build_windows_x64
#
#      - name: Delete path
#        run: rm -rf ./webgpu/webgpu-dawn/build/dawn/install/
#        shell: bash
#
#      - name: Generate x64 shared
#        run: ./gradlew :webgpu:webgpu-dawn:generateCMake_windows_x64_shared
#
#      - name: Build x64 shared
#        run: ./gradlew :webgpu:webgpu-dawn:build_windows_x64
#
#      - name: Upload x64 shared
#        uses: actions/upload-artifact@v4
#        with:
#          name: windows_x64_shared
#          path: ./webgpu/webgpu-dawn/build/dawn/install/build_windows_x64

  build_macos_x64:
    name: Build MacOS x64
    runs-on: macos-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "corretto"
          java-version: 17

      - name: Install CMake and Ninja
        run: |
          brew install cmake ninja

      - name: Download sources
        run: ./gradlew :webgpu:webgpu-dawn:download_source

      - name: Generate x64 static
        run: ./gradlew :webgpu:webgpu-dawn:generateCMake_mac_x64_static

      - name: Build x64 static
        run: ./gradlew :webgpu:webgpu-dawn:build_mac_x64

      - name: Upload x64 static
        uses: actions/upload-artifact@v4
        with:
          name: macos_x64_static
          path: ./webgpu/webgpu-dawn/build/dawn/install/build_mac_x64

      - name: Delete path
        run: rm -rf ./webgpu/webgpu-dawn/build/dawn/install/
        shell: bash

  build_macos_arm64:
    name: Build MacOS arm64
    runs-on: macos-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "corretto"
          java-version: 17

      - name: Install CMake and Ninja
        run: |
          brew install cmake ninja

      - name: Download sources
        run: ./gradlew :webgpu:webgpu-dawn:download_source

      - name: Generate arm64 static
        run: ./gradlew :webgpu:webgpu-dawn:generateCMake_mac_arm64_static

      - name: Build arm64 static
        run: ./gradlew :webgpu:webgpu-dawn:build_mac_arm64

      - name: Upload arm64 static
        uses: actions/upload-artifact@v4
        with:
          name: macos_arm64_static
          path: ./webgpu/webgpu-dawn/build/dawn/install/build_mac_arm64

      - name: Delete path
        run: rm -rf ./webgpu/webgpu-dawn/build/dawn/install/
        shell: bash
#
#  build_linux_x64:
#    name: Build Linux x64
#    runs-on: ubuntu-latest
#    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.12.1
#        with:
#          access_token: ${{ github.token }}
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: "corretto"
#          java-version: 17
#
#      - name: Install CMake, Ninja, and dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y cmake ninja-build libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libgl1-mesa-dev libx11-xcb-dev libxcb1-dev
#
#      - name: Download sources
#        run: ./gradlew :webgpu:webgpu-dawn:download_source
#
#      - name: Generate x64 static
#        run: ./gradlew :webgpu:webgpu-dawn:generateCMake_linux_x64_static
#
#      - name: Build x64 static
#        run: ./gradlew :webgpu:webgpu-dawn:build_linux_x64
#
#      - name: Upload x64 static
#        uses: actions/upload-artifact@v4
#        with:
#          name: linux_x64_static
#          path: ./webgpu/webgpu-dawn/build/dawn/install/build_linux_x64
#
#      - name: Delete path
#        run: rm -rf ./webgpu/webgpu-dawn/build/dawn/install/
#        shell: bash
#
#  build_android_arm64:
#    name: Build Android arm64
#    runs-on: ubuntu-22.04
#    timeout-minutes: 60
#    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.12.1
#        with:
#          access_token: ${{ github.token }}
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: "corretto"
#          java-version: 17
#
#      - name: Set up Android NDK
#        uses: android-actions/setup-android@v3
#        with:
#          ndk-version: '26.1.10909125'
#
#      - name: Install CMake and Ninja
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y cmake ninja-build
#
#      - name: Download sources
#        run: ./gradlew :webgpu:webgpu-dawn:download_source
#
#      - name: Generate arm64 static
#        run: ./gradlew :webgpu:webgpu-dawn:generateCMake_android_arm64_static
#        env:
#          ANDROID_NDK: ${{ env.ANDROID_NDK_HOME }}
#
#      - name: Build arm64 static
#        run: ./gradlew :webgpu:webgpu-dawn:build_android_arm64
#
#      - name: Upload arm64 static
#        uses: actions/upload-artifact@v4
#        with:
#          name: android_arm64_static
#          path: ./webgpu/webgpu-dawn/build/dawn/install/build_android_arm64
#
#      - name: Delete path
#        run: rm -rf ./webgpu/webgpu-dawn/build/dawn/install/
#        shell: bash
#
#  build_android_armv7:
#    name: Build Android armv7
#    runs-on: ubuntu-22.04
#    timeout-minutes: 60
#    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.12.1
#        with:
#          access_token: ${{ github.token }}
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: "corretto"
#          java-version: 17
#
#      - name: Set up Android NDK
#        uses: android-actions/setup-android@v3
#        with:
#          ndk-version: '26.1.10909125'
#
#      - name: Install CMake and Ninja
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y cmake ninja-build
#
#      - name: Download sources
#        run: ./gradlew :webgpu:webgpu-dawn:download_source
#
#      - name: Generate armv7 static
#        run: ./gradlew :webgpu:webgpu-dawn:generateCMake_android_armv7_static
#        env:
#          ANDROID_NDK: ${{ env.ANDROID_NDK_HOME }}
#
#      - name: Build armv7 static
#        timeout-minutes: 30
#        run: ./gradlew :webgpu:webgpu-dawn:build_android_armv7
#
#      - name: Upload armv7 static
#        uses: actions/upload-artifact@v4
#        with:
#          name: android_armv7_static
#          path: ./webgpu/webgpu-dawn/build/dawn/install/build_android_armv7
#
#      - name: Delete path
#        run: rm -rf ./webgpu/webgpu-dawn/build/dawn/install/
#        shell: bash
#
#  build_android_x64:
#    name: Build Android x64
#    runs-on: ubuntu-22.04
#    timeout-minutes: 60
#    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.12.1
#        with:
#          access_token: ${{ github.token }}
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: "corretto"
#          java-version: 17
#
#      - name: Set up Android NDK
#        uses: android-actions/setup-android@v3
#        with:
#          ndk-version: '26.1.10909125'
#
#      - name: Install CMake and Ninja
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y cmake ninja-build
#
#      - name: Download sources
#        run: ./gradlew :webgpu:webgpu-dawn:download_source
#
#      - name: Generate x64 static
#        run: ./gradlew :webgpu:webgpu-dawn:generateCMake_android_x64_static
#        env:
#          ANDROID_NDK: ${{ env.ANDROID_NDK_HOME }}
#
#      - name: Build x64 static
#        timeout-minutes: 30
#        run: ./gradlew :webgpu:webgpu-dawn:build_android_x64
#
#      - name: Upload x64 static
#        uses: actions/upload-artifact@v4
#        with:
#          name: android_x64_static
#          path: ./webgpu/webgpu-dawn/build/dawn/install/build_android_x64
#
#      - name: Delete path
#        run: rm -rf ./webgpu/webgpu-dawn/build/dawn/install/
#        shell: bash
#
#  build_android_x86:
#    name: Build Android x86
#    runs-on: ubuntu-22.04
#    timeout-minutes: 60
#    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.12.1
#        with:
#          access_token: ${{ github.token }}
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: "corretto"
#          java-version: 17
#
#      - name: Set up Android NDK
#        uses: android-actions/setup-android@v3
#        with:
#          ndk-version: '26.1.10909125'
#
#      - name: Install CMake and Ninja
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y cmake ninja-build
#
#      - name: Download sources
#        run: ./gradlew :webgpu:webgpu-dawn:download_source
#
#      - name: Generate x86 static
#        run: ./gradlew :webgpu:webgpu-dawn:generateCMake_android_x86_static
#        env:
#          ANDROID_NDK: ${{ env.ANDROID_NDK_HOME }}
#
#      - name: Build x86 static
#        timeout-minutes: 30
#        run: ./gradlew :webgpu:webgpu-dawn:build_android_x86
#
#      - name: Upload x86 static
#        uses: actions/upload-artifact@v4
#        with:
#          name: android_x86_static
#          path: ./webgpu/webgpu-dawn/build/dawn/install/build_android_x86
#
#      - name: Delete path
#        run: rm -rf ./webgpu/webgpu-dawn/build/dawn/install/
#        shell: bash
#
#  build_ios_arm64:
#    name: Build iOS arm64
#    runs-on: macos-latest
#    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.12.1
#        with:
#          access_token: ${{ github.token }}
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: "corretto"
#          java-version: 17
#
#      - name: Install CMake and Ninja
#        run: |
#          brew install cmake ninja
#
#      - name: Download sources
#        run: ./gradlew :webgpu:webgpu-dawn:download_source
#
#      - name: Download Apple toolchain
#        run: |
#          mkdir -p webgpu/webgpu-dawn/build/build-tools
#          # Download the ios-cmake toolchain file
#          curl -L https://raw.githubusercontent.com/leetal/ios-cmake/6fa909e133b92343db2d099e0478448c05ffec1a/ios.toolchain.cmake -o webgpu/webgpu-dawn/build/build-tools/apple.toolchain.cmake
#
#      - name: Generate arm64 static
#        run: ./gradlew :webgpu:webgpu-dawn:generateCMake_ios_arm64_static
#
#      - name: Build arm64 static
#        run: ./gradlew :webgpu:webgpu-dawn:build_ios_arm64
#
#      - name: Upload arm64 static
#        uses: actions/upload-artifact@v4
#        with:
#          name: ios_arm64_static
#          path: ./webgpu/webgpu-dawn/build/dawn/install/build_ios_arm64
#
#      - name: Delete path
#        run: rm -rf ./webgpu/webgpu-dawn/build/dawn/install/
#        shell: bash
#
#  build_ios_universal:
#    name: Build iOS universal
#    runs-on: macos-latest
#    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.12.1
#        with:
#          access_token: ${{ github.token }}
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: "corretto"
#          java-version: 17
#
#      - name: Install CMake and Ninja
#        run: |
#          brew install cmake ninja
#
#      - name: Download sources
#        run: ./gradlew :webgpu:webgpu-dawn:download_source
#
#      - name: Download Apple toolchain
#        run: |
#          mkdir -p webgpu/webgpu-dawn/build/build-tools
#          # Download the ios-cmake toolchain file
#          curl -L https://raw.githubusercontent.com/leetal/ios-cmake/6fa909e133b92343db2d099e0478448c05ffec1a/ios.toolchain.cmake -o webgpu/webgpu-dawn/build/build-tools/apple.toolchain.cmake
#
#      - name: Generate universal static
#        run: ./gradlew :webgpu:webgpu-dawn:generateCMake_ios_universal_static
#
#      - name: Build universal static
#        run: ./gradlew :webgpu:webgpu-dawn:build_ios_universal
#
#      - name: Upload universal static
#        uses: actions/upload-artifact@v4
#        with:
#          name: ios_universal_static
#          path: ./webgpu/webgpu-dawn/build/dawn/install/build_ios_universal
#
#      - name: Delete path
#        run: rm -rf ./webgpu/webgpu-dawn/build/dawn/install/
#        shell: bash
#
#  build_ios_sim_arm64:
#    name: Build iOS sim_arm64
#    runs-on: macos-latest
#    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.12.1
#        with:
#          access_token: ${{ github.token }}
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: "corretto"
#          java-version: 17
#
#      - name: Install CMake and Ninja
#        run: |
#          brew install cmake ninja
#
#      - name: Download sources
#        run: ./gradlew :webgpu:webgpu-dawn:download_source
#
#      - name: Download Apple toolchain
#        run: |
#          mkdir -p webgpu/webgpu-dawn/build/build-tools
#          # Download the ios-cmake toolchain file
#          curl -L https://raw.githubusercontent.com/leetal/ios-cmake/6fa909e133b92343db2d099e0478448c05ffec1a/ios.toolchain.cmake -o webgpu/webgpu-dawn/build/build-tools/apple.toolchain.cmake
#
#      - name: Generate sim_arm64 static
#        run: ./gradlew :webgpu:webgpu-dawn:generateCMake_ios_sim_arm64_static
#
#      - name: Build sim_arm64 static
#        run: ./gradlew :webgpu:webgpu-dawn:build_ios_sim_arm64
#
#      - name: Upload sim_arm64 static
#        uses: actions/upload-artifact@v4
#        with:
#          name: ios_sim_arm64_static
#          path: ./webgpu/webgpu-dawn/build/dawn/install/build_ios_sim_arm64
#
#      - name: Delete path
#        run: rm -rf ./webgpu/webgpu-dawn/build/dawn/install/
#        shell: bash
#
#  build_ios_sim_x64:
#    name: Build iOS sim_x64
#    runs-on: macos-latest
#    steps:
#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.12.1
#        with:
#          access_token: ${{ github.token }}
#
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          distribution: "corretto"
#          java-version: 17
#
#      - name: Install CMake and Ninja
#        run: |
#          brew install cmake ninja
#
#      - name: Download sources
#        run: ./gradlew :webgpu:webgpu-dawn:download_source
#
#      - name: Download Apple toolchain
#        run: |
#          mkdir -p webgpu/webgpu-dawn/build/build-tools
#          # Download the ios-cmake toolchain file
#          curl -L https://raw.githubusercontent.com/leetal/ios-cmake/6fa909e133b92343db2d099e0478448c05ffec1a/ios.toolchain.cmake -o webgpu/webgpu-dawn/build/build-tools/apple.toolchain.cmake
#
#      - name: Generate sim_x64 static
#        run: ./gradlew :webgpu:webgpu-dawn:generateCMake_ios_sim_x64_static
#
#      - name: Build sim_x64 static
#        run: ./gradlew :webgpu:webgpu-dawn:build_ios_sim_x64
#
#      - name: Upload sim_x64 static
#        uses: actions/upload-artifact@v4
#        with:
#          name: ios_sim_x64_static
#          path: ./webgpu/webgpu-dawn/build/dawn/install/build_ios_sim_x64
#
#      - name: Delete path
#        run: rm -rf ./webgpu/webgpu-dawn/build/dawn/install/
#        shell: bash

  create-release:
    runs-on: ubuntu-latest
    name: Create release
    needs: [build_macos_x64, build_macos_arm64]

    steps:
      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |

            var name = "dawn_7458";

            try {
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: name,
                target_commitish: 'dawn_natives',
                name: name,
                draft: true,
                prerelease: false
              });

              console.log(`Created release: ${release.data.html_url}`);
              core.setOutput('release_id', release.data.id);
              core.setOutput('upload_url', release.data.upload_url);

            } catch (error) {
              core.setFailed(`Failed to create release: ${error.message}`);
              console.error(error);
            }
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Debug downloaded artifacts
        run: |
          echo "Downloaded artifacts structure:"
          if [ -d "artifacts" ]; then
            ls -laR artifacts/ || echo "No files in artifacts/"
          else
            echo "ERROR: artifacts directory does not exist!"
            exit 1
          fi

      - name: Upload all artifacts to release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const artifactsDir = 'artifacts';
              const releaseId = parseInt('${{ steps.create_release.outputs.release_id }}');
            
              // Check if artifacts directory exists
              if (!fs.existsSync(artifactsDir)) {
                core.setFailed(`Directory ${artifactsDir} does not exist! No artifacts were downloaded.`);
                return;
              }
            
              console.log(`📂 Scanning artifacts in: ${artifactsDir}`);
            
              // Get all artifact directories
              const artifactDirs = fs.readdirSync(artifactsDir).filter(dir => 
                fs.statSync(path.join(artifactsDir, dir)).isDirectory()
              );
            
              if (artifactDirs.length === 0) {
                core.setFailed(`No artifact directories found in ${artifactsDir}!`);
                return;
              }
            
              console.log(`Found ${artifactDirs.length} artifact sets: ${artifactDirs.join(', ')}`);
            
              let totalFiles = 0;
            
              for (const artifactDir of artifactDirs) {
                const dirPath = path.join(artifactsDir, artifactDir);
                let files;
            
                try {
                  // Process .zip or .ZIP files (case-insensitive)
                  files = fs.readdirSync(dirPath).filter(file => 
                    fs.statSync(path.join(dirPath, file)).isFile() && 
                    file.toLowerCase().endsWith('.zip')
                  );
                } catch (e) {
                  core.warning(`Could not read directory ${dirPath}: ${e.message}`);
                  continue;
                }
            
                console.log(`\n📦 Processing ${artifactDir}: ${files.length} zip files: ${files.join(', ')}`);
            
                if (files.length === 0) {
                  core.warning(`No .zip files found in ${artifactDir}`);
                  continue;
                }
            
                for (const file of files) {
                  const filePath = path.join(dirPath, file);
            
                  try {
                    const fileBuffer = fs.readFileSync(filePath);
                    const fileStats = fs.statSync(filePath);
            
                    // Use the original zip filename
                    const releaseAssetName = file;
            
                    console.log(`📤 Uploading ${artifactDir}/${file} (${(fileStats.size / 1024 / 1024).toFixed(2)} MB)`);
            
                    await github.rest.repos.uploadReleaseAsset({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      release_id: releaseId,
                      name: releaseAssetName,
                      data: fileBuffer
                    });
            
                    console.log(`✅ Successfully uploaded ${releaseAssetName}`);
                    totalFiles++;
            
                  } case {
                    core.error(`Failed to upload ${filePath}: ${uploadError.message}`);
                    // Continue with other files
                  }
                }
              }
            
              if (totalFiles === 0) {
                core.setFailed('No .zip files were uploaded to the release!');
                return;
              }
            
              console.log(`\n🎉 Successfully uploaded ${totalFiles} zip files to release!`);
            
            } catch (error) {
              core.setFailed(`Upload process failed: ${error.message}`);
              console.error(error);
            }