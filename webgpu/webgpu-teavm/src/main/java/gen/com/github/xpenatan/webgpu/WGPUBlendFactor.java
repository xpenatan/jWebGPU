/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.com.github.xpenatan.webgpu;

import java.util.Map;
import java.util.HashMap;
import gen.com.github.xpenatan.webgpu.idl.IDLEnum;

public enum WGPUBlendFactor implements IDLEnum<WGPUBlendFactor> {

    CUSTOM(0),
    Undefined(WGPUBlendFactor_Undefined_NATIVE()),
    Zero(WGPUBlendFactor_Zero_NATIVE()),
    One(WGPUBlendFactor_One_NATIVE()),
    Src(WGPUBlendFactor_Src_NATIVE()),
    OneMinusSrc(WGPUBlendFactor_OneMinusSrc_NATIVE()),
    SrcAlpha(WGPUBlendFactor_SrcAlpha_NATIVE()),
    OneMinusSrcAlpha(WGPUBlendFactor_OneMinusSrcAlpha_NATIVE()),
    Dst(WGPUBlendFactor_Dst_NATIVE()),
    OneMinusDst(WGPUBlendFactor_OneMinusDst_NATIVE()),
    DstAlpha(WGPUBlendFactor_DstAlpha_NATIVE()),
    OneMinusDstAlpha(WGPUBlendFactor_OneMinusDstAlpha_NATIVE()),
    SrcAlphaSaturated(WGPUBlendFactor_SrcAlphaSaturated_NATIVE()),
    Constant(WGPUBlendFactor_Constant_NATIVE()),
    OneMinusConstant(WGPUBlendFactor_OneMinusConstant_NATIVE()),
    Src1(WGPUBlendFactor_Src1_NATIVE()),
    OneMinusSrc1(WGPUBlendFactor_OneMinusSrc1_NATIVE()),
    Src1Alpha(WGPUBlendFactor_Src1Alpha_NATIVE()),
    OneMinusSrc1Alpha(WGPUBlendFactor_OneMinusSrc1Alpha_NATIVE()),
    Force32(WGPUBlendFactor_Force32_NATIVE());

    private int value;

    private WGPUBlendFactor(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }

    public WGPUBlendFactor setValue(int value) {
        if (this != CUSTOM) {
            throw new RuntimeException("Cannot change none CUSTOM value");
        }
        this.value = value;
        return this;
    }

    public WGPUBlendFactor getCustom() {
        return CUSTOM;
    }

    public static final Map<Integer, WGPUBlendFactor> MAP = new HashMap<>();

    static {
        for (WGPUBlendFactor value : values()) {
            if (value != CUSTOM) {
                MAP.put(value.value, value);
            }
        }
    }

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_Undefined;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_Undefined;")
    private static native int WGPUBlendFactor_Undefined_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_Zero;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_Zero;")
    private static native int WGPUBlendFactor_Zero_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_One;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_One;")
    private static native int WGPUBlendFactor_One_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_Src;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_Src;")
    private static native int WGPUBlendFactor_Src_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_OneMinusSrc;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_OneMinusSrc;")
    private static native int WGPUBlendFactor_OneMinusSrc_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_SrcAlpha;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_SrcAlpha;")
    private static native int WGPUBlendFactor_SrcAlpha_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_OneMinusSrcAlpha;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_OneMinusSrcAlpha;")
    private static native int WGPUBlendFactor_OneMinusSrcAlpha_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_Dst;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_Dst;")
    private static native int WGPUBlendFactor_Dst_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_OneMinusDst;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_OneMinusDst;")
    private static native int WGPUBlendFactor_OneMinusDst_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_DstAlpha;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_DstAlpha;")
    private static native int WGPUBlendFactor_DstAlpha_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_OneMinusDstAlpha;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_OneMinusDstAlpha;")
    private static native int WGPUBlendFactor_OneMinusDstAlpha_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_SrcAlphaSaturated;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_SrcAlphaSaturated;")
    private static native int WGPUBlendFactor_SrcAlphaSaturated_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_Constant;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_Constant;")
    private static native int WGPUBlendFactor_Constant_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_OneMinusConstant;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_OneMinusConstant;")
    private static native int WGPUBlendFactor_OneMinusConstant_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_Src1;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_Src1;")
    private static native int WGPUBlendFactor_Src1_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_OneMinusSrc1;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_OneMinusSrc1;")
    private static native int WGPUBlendFactor_OneMinusSrc1_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_Src1Alpha;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_Src1Alpha;")
    private static native int WGPUBlendFactor_Src1Alpha_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_OneMinusSrc1Alpha;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_OneMinusSrc1Alpha;")
    private static native int WGPUBlendFactor_OneMinusSrc1Alpha_NATIVE();

    /*[-TEAVM;-NATIVE]
return jWebGPU.WGPUBlendFactor_Force32;
*/
    @org.teavm.jso.JSBody(script = "return jWebGPU.WGPUBlendFactor_Force32;")
    private static native int WGPUBlendFactor_Force32_NATIVE();
}
