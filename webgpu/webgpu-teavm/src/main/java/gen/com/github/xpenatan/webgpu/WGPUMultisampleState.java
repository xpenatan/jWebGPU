/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.com.github.xpenatan.webgpu;

import gen.com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUMultisampleState extends IDLBase {

    static public final WGPUMultisampleState NULL = WGPUMultisampleState.native_new();

    static public final WGPUMultisampleState T_01 = WGPUMultisampleState.native_new();

    static public final WGPUMultisampleState T_02 = WGPUMultisampleState.native_new();

    static public final WGPUMultisampleState T_03 = WGPUMultisampleState.native_new();

    public WGPUMultisampleState() {
        int addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = new jWebGPU.WGPUMultisampleState();
return jWebGPU.getPointer(jsObj);
*/
    @org.teavm.jso.JSBody(script = "var jsObj = new jWebGPU.WGPUMultisampleState();return jWebGPU.getPointer(jsObj);")
    public static native int internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUMultisampleState(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUMultisampleState native_new() {
        return new WGPUMultisampleState((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jWebGPU.wrapPointer(this_addr, jWebGPU.WGPUMultisampleState);
jWebGPU.destroy(jsObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jWebGPU.wrapPointer(this_addr, jWebGPU.WGPUMultisampleState);jWebGPU.destroy(jsObj);")
    public static native void internal_native_deleteNative(int this_addr);

    public void setNextInChain(WGPUChainedStruct chainedStruct) {
        internal_native_SetNextInChain(native_address, chainedStruct.native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jWebGPU.wrapPointer(this_addr, jWebGPU.WGPUMultisampleState);
jsObj.SetNextInChain(chainedStruct_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "chainedStruct_addr"}, script = "var jsObj = jWebGPU.wrapPointer(this_addr, jWebGPU.WGPUMultisampleState);jsObj.SetNextInChain(chainedStruct_addr);")
    public static native void internal_native_SetNextInChain(int this_addr, int chainedStruct_addr);

    public void setCount(int count) {
        internal_native_SetCount(native_address, count);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jWebGPU.wrapPointer(this_addr, jWebGPU.WGPUMultisampleState);
jsObj.SetCount(count);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "count"}, script = "var jsObj = jWebGPU.wrapPointer(this_addr, jWebGPU.WGPUMultisampleState);jsObj.SetCount(count);")
    public static native void internal_native_SetCount(int this_addr, int count);

    public void setMask(int mask) {
        internal_native_SetMask(native_address, mask);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jWebGPU.wrapPointer(this_addr, jWebGPU.WGPUMultisampleState);
jsObj.SetMask(mask);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "mask"}, script = "var jsObj = jWebGPU.wrapPointer(this_addr, jWebGPU.WGPUMultisampleState);jsObj.SetMask(mask);")
    public static native void internal_native_SetMask(int this_addr, int mask);

    public void setAlphaToCoverageEnabled(boolean alphaToCoverageEnabled) {
        internal_native_SetAlphaToCoverageEnabled(native_address, alphaToCoverageEnabled);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jWebGPU.wrapPointer(this_addr, jWebGPU.WGPUMultisampleState);
jsObj.SetAlphaToCoverageEnabled(alphaToCoverageEnabled);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "alphaToCoverageEnabled"}, script = "var jsObj = jWebGPU.wrapPointer(this_addr, jWebGPU.WGPUMultisampleState);jsObj.SetAlphaToCoverageEnabled(alphaToCoverageEnabled);")
    public static native void internal_native_SetAlphaToCoverageEnabled(int this_addr, boolean alphaToCoverageEnabled);
}
