// ################################### CUSTOM CODE ###################################

interface WGPU {
    static WGPUPlatformType GetPlatformType();
    static WGPUInstance SetupInstance(optional WGPUInstanceDescriptor descriptor); //[-NEW_OBJECT]
    static STBImage loadImage(WGPUByteBuffer buffer, optional long desiredChannels);
};

interface STBImage {
    WGPUByteBuffer GetPixels();
    long GetWidth();
    long GetHeight();
    long GetFormat();
};

interface WGPUAndroidWindow {
    void WGPUAndroidWindow();
    void InitLogcat();
};

interface WGPUByteBuffer {
    void WGPUByteBuffer(long capacity);
    static WGPUByteBuffer Obtain(long capacity);
    void order(WGPUByteOrder order);
    byte get(long index);
    [BindTo="put"] void put__0(byte value);
    [BindTo="put"] void put__1(long index, byte value);
    byte get();
    void putInt(long byteIndex, long value);
    long getInt(long byteIndex);
    void putFloat(long byteIndex, float value);
    float getFloat(long byteIndex);
    long remaining();
    long getCapacity();
    void position(long newPosition);
    long getPosition();
    void limit(long newLimit);
    long getLimit();
    void clear();
    void flip();
    [Ref] WGPUFloatBuffer asFloatBuffer();
    [Ref] WGPUIntBuffer asIntBuffer();
    [Ref] WGPULongBuffer asLongBuffer();
    [Ref] WGPUShortBuffer asShortBuffer();
};

interface WGPUFloatBuffer {
    [Ref] WGPUByteBuffer getByteBuffer();
    [BindTo="put"] void put__0(float value);
    [BindTo="put"] void put__1(long index, float value);
    [BindTo="put"] void put__2(float[] values, long offset, long size); //[-SKIP]
    float get(long index);
    float get();
    long remaining();
    long getCapacity();
    void clear();
    void limit(long newLimit);
    long getLimit();
    void position(long newPosition);
    long getPosition();
    void flip();
};

interface WGPUIntBuffer {
    [Ref] WGPUByteBuffer getByteBuffer();
    [BindTo="put"] void put__0(long value);
    [BindTo="put"] void put__1(long index, long value);
    long get(long index);
    long get();
    long remaining();
    long getCapacity();
    void clear();
    void limit(long newLimit);
    long getLimit();
    void position(long newPosition);
    long getPosition();
    void flip();
};

interface WGPULongBuffer {
    [Ref] WGPUByteBuffer getByteBuffer();
    [BindTo="put"] void put__0(long long value);
    [BindTo="put"] void put__1(long index, long long value);
    long long get(long index);
    long long get();
    long remaining();
    long getCapacity();
    void clear();
    void limit(long newLimit);
    long getLimit();
    void position(long newPosition);
    long getPosition();
    void flip();
};

interface WGPUShortBuffer {
    [Ref] WGPUByteBuffer getByteBuffer();
    [BindTo="put"] void put__0(short value);
    [BindTo="put"] void put__1(long index, short value);
    short get(long index);
    short get();
    long remaining();
    long getCapacity();
    void clear();
    void limit(long newLimit);
    long getLimit();
    void position(long newPosition);
    long getPosition();
    void flip();
};

enum WGPUByteOrder {
    "BigEndian",    //[-RENAME=BigEndian]
    "LittleEndian"  //[-RENAME=LittleEndian]
};

enum WGPUPlatformType {
    "WGPU_Windows",
    "WGPU_Mac",
    "WGPU_Linux",
    "WGPU_iOS",
    "WGPU_Android",
    "WGPU_Web",
    "WGPU_Unknown",
};

// ################################### VECTORS ###################################

[Prefix="JGPU::"]
interface WGPUVectorCommandBuffer {
    void WGPUVectorCommandBuffer();
    long size();
    void clear();
    void push_back([Ref] WGPUCommandBuffer entry);
    static WGPUVectorCommandBuffer Obtain();
};

[Prefix="JGPU::"]
interface WGPUVectorFutureWaitInfo {
    void WGPUVectorFutureWaitInfo();
    long size();
    void clear();
    void push_back([Ref] WGPUFutureWaitInfo entry);
    static WGPUVectorFutureWaitInfo Obtain();
};

[Prefix="JGPU::"]
interface WGPUVectorBindGroupEntry {
    void WGPUVectorBindGroupEntry();
    long size();
    void clear();
    void push_back([Ref] WGPUBindGroupEntry entry);
    static WGPUVectorBindGroupEntry Obtain();
};

[Prefix="JGPU::"]
interface WGPUVectorColorTargetState {
    void WGPUVectorColorTargetState();
    long size();
    void clear();
    void push_back([Ref] WGPUColorTargetState colorTargetState);
    static WGPUVectorColorTargetState Obtain();
};

[Prefix="JGPU::"]
interface WGPUVectorFeatureName {
    void WGPUVectorFeatureName();
    long size();
    void clear();
    void push_back(WGPUFeatureName featureName);
    static WGPUVectorFeatureName Obtain();
};

[Prefix="JGPU::"]
interface WGPUVectorConstantEntry {
    void WGPUVectorConstantEntry();
    long size();
    void clear();
    void push_back([Ref] WGPUConstantEntry constantEntry);
    static WGPUVectorConstantEntry Obtain();
};

[Prefix="JGPU::"]
interface WGPUVectorVertexBufferLayout {
    void WGPUVectorVertexBufferLayout();
    long size();
    void clear();
    void push_back([Ref] WGPUVertexBufferLayout vertexBufferLayout);
    static WGPUVectorVertexBufferLayout Obtain();
};

[Prefix="JGPU::"]
interface WGPUVectorTextureFormat {
    void WGPUVectorTextureFormat();
    long size();
    void clear();
    void push_back(WGPUTextureFormat textureFormat);
    WGPUTextureFormat get(long index);
    static WGPUVectorTextureFormat Obtain();
};

[Prefix="JGPU::"]
interface WGPUVectorRenderBundle {
    void WGPUVectorRenderBundle();
    long size();
    void clear();
    void push_back([Ref] WGPURenderBundle renderBundle);
    static WGPUVectorRenderBundle Obtain();
};

[Prefix="JGPU::"]
interface WGPUVectorRenderPassColorAttachment {
    void WGPUVectorRenderPassColorAttachment();
    long size();
    void clear();
    void push_back([Ref] WGPURenderPassColorAttachment colorAttachment);
    static WGPUVectorRenderPassColorAttachment Obtain();
};

[Prefix="JGPU::"]
interface WGPUVectorVertexAttribute {
    void WGPUVectorVertexAttribute();
    long size();
    void clear();
    void push_back([Ref] WGPUVertexAttribute colorAttachment);
    static WGPUVectorVertexAttribute Obtain();
};

[Prefix="JGPU::"]
interface WGPUVectorBindGroupLayout {
    void WGPUVectorBindGroupLayout();
    long size();
    void clear();
    void push_back([Ref] WGPUBindGroupLayout groupLayout);
    static WGPUVectorBindGroupLayout Obtain();
};

[Prefix="JGPU::"]
interface WGPUVectorBindGroupLayoutEntry {
    void WGPUVectorBindGroupLayoutEntry();
    long size();
    void clear();
    void push_back([Ref] WGPUBindGroupLayoutEntry groupLayout);
    static WGPUVectorBindGroupLayoutEntry Obtain();
};

[Prefix="JGPU::"]
interface WGPUVectorInt {
    void WGPUVectorInt();
    long size();
    void clear();
    void push_back(long value);
    long get(long index);
    static WGPUVectorInt Obtain();
};

// ################################### CALLBACKS ###################################

[Prefix="JGPU::"]
interface WGPUCompilationInfoCallback {
};

[JSImplementation="WGPUCompilationInfoCallback"]
interface WGPUCompilationInfoCallbackImpl {
    void WGPUCompilationInfoCallbackImpl();
    void OnCallback(WGPUCompilationInfoRequestStatus status, WGPUCompilationInfo compilationInfo);
};

[Prefix="JGPU::"]
interface WGPURequestAdapterCallback {
};

[JSImplementation="WGPURequestAdapterCallback"]
interface WGPURequestAdapterCallbackImpl {
    void WGPURequestAdapterCallbackImpl();
    void OnCallback(WGPURequestAdapterStatus status, WGPUAdapter adapter, [Const] DOMString message); //[-NEW_PARAM=adapter]
};

[Prefix="JGPU::"]
interface WGPURequestDeviceCallback {
};

[JSImplementation="WGPURequestDeviceCallback"]
interface WGPURequestDeviceCallbackImpl {
    void WGPURequestDeviceCallbackImpl();
    void OnCallback(WGPURequestDeviceStatus status, WGPUDevice device, [Const] DOMString message); //[-NEW_PARAM=device]
};

[Prefix="JGPU::"]
interface WGPUUncapturedErrorCallback {
};

[JSImplementation="WGPUUncapturedErrorCallback"]
interface WGPUUncapturedErrorCallbackImpl {
    void WGPUUncapturedErrorCallbackImpl();
    void OnCallback(WGPUErrorType errorType, [Const] DOMString message);
};

[Prefix="JGPU::"]
interface WGPUBufferMapCallback {
};

[JSImplementation="WGPUBufferMapCallback"]
interface WGPUBufferMapCallbackImpl {
    void WGPUBufferMapCallbackImpl();
    void OnCallback(WGPUMapAsyncStatus status, [Const] DOMString message);
};

// ################################### STRUCTS ###################################

[Prefix="JGPU::"]
interface WGPUFuture {
};

[Prefix="JGPU::"]
interface WGPUFutureWaitInfo {
    void SetFuture(WGPUFuture future);
    static WGPUFutureWaitInfo Obtain();
};

[Prefix="JGPU::"]
interface WGPUAdapterInfo {
    void WGPUAdapterInfo();
    [Value] IDLString GetVendor();
    long GetVendorID();
    [Value] IDLString GetArchitecture();
    [Value] IDLString GetDevice();
    long GetDeviceID();
    [Value] IDLString GetDescription();
    WGPUBackendType GetBackendType();
    WGPUAdapterType GetAdapterType();
    static WGPUAdapterInfo Obtain();
};

[Prefix="JGPU::"]
interface WGPULimits {
    void WGPULimits();

    void SetMaxTextureDimension1D(long value);
    long GetMaxTextureDimension1D();

    void SetMaxTextureDimension2D(long value);
    long GetMaxTextureDimension2D();

    void SetMaxTextureDimension3D(long value);
    long GetMaxTextureDimension3D();

    void SetMaxTextureArrayLayers(long value);
    long GetMaxTextureArrayLayers();

    void SetMaxBindGroups(long value);
    long GetMaxBindGroups();

    void SetMaxBindGroupsPlusVertexBuffers(long value);
    long GetMaxBindGroupsPlusVertexBuffers();

    void SetMaxBindingsPerBindGroup(long value);
    long GetMaxBindingsPerBindGroup();

    void SetMaxDynamicUniformBuffersPerPipelineLayout(long value);
    long GetMaxDynamicUniformBuffersPerPipelineLayout();

    void SetMaxDynamicStorageBuffersPerPipelineLayout(long value);
    long GetMaxDynamicStorageBuffersPerPipelineLayout();

    void SetMaxSampledTexturesPerShaderStage(long value);
    long GetMaxSampledTexturesPerShaderStage();

    void SetMaxSamplersPerShaderStage(long value);
    long GetMaxSamplersPerShaderStage();

    void SetMaxStorageBuffersPerShaderStage(long value);
    long GetMaxStorageBuffersPerShaderStage();

    void SetMaxStorageTexturesPerShaderStage(long value);
    long GetMaxStorageTexturesPerShaderStage();

    void SetMaxUniformBuffersPerShaderStage(long value);
    long GetMaxUniformBuffersPerShaderStage();

    void SetMaxUniformBufferBindingSize(long value);
    long GetMaxUniformBufferBindingSize();

    void SetMaxStorageBufferBindingSize(long value);
    long GetMaxStorageBufferBindingSize();

    void SetMinUniformBufferOffsetAlignment(long value);
    long GetMinUniformBufferOffsetAlignment();

    void SetMinStorageBufferOffsetAlignment(long value);
    long GetMinStorageBufferOffsetAlignment();

    void SetMaxVertexBuffers(long value);
    long GetMaxVertexBuffers();

    void SetMaxBufferSize(long long value);
    long GetMaxBufferSize();

    void SetMaxVertexAttributes(long value);
    long GetMaxVertexAttributes();

    void SetMaxVertexBufferArrayStride(long value);
    long GetMaxVertexBufferArrayStride();

    void SetMaxInterStageShaderVariables(long value);
    long GetMaxInterStageShaderVariables();

    void SetMaxColorAttachments(long value);
    long GetMaxColorAttachments();

    void SetMaxColorAttachmentBytesPerSample(long value);
    long GetMaxColorAttachmentBytesPerSample();

    void SetMaxComputeWorkgroupStorageSize(long value);
    long GetMaxComputeWorkgroupStorageSize();

    void SetMaxComputeInvocationsPerWorkgroup(long value);
    long GetMaxComputeInvocationsPerWorkgroup();

    void SetMaxComputeWorkgroupSizeX(long value);
    long GetMaxComputeWorkgroupSizeX();

    void SetMaxComputeWorkgroupSizeY(long value);
    long GetMaxComputeWorkgroupSizeY();

    void SetMaxComputeWorkgroupSizeZ(long value);
    long GetMaxComputeWorkgroupSizeZ();

    void SetMaxComputeWorkgroupsPerDimension(long value);
    long GetMaxComputeWorkgroupsPerDimension();

    static WGPULimits Obtain();
};

[Prefix="JGPU::"]
interface WGPURequestAdapterOptions {
    void WGPURequestAdapterOptions();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetFeatureLevel(WGPUFeatureLevel featureLevel);
    void SetPowerPreference(WGPUPowerPreference powerPreference);
    void SetBackendType(WGPUBackendType backendType);
    void SetCompatibleSurface(WGPUSurface compatibleSurface);
    static WGPURequestAdapterOptions Obtain();
};

[Prefix="JGPU::"]
interface WGPUShaderSourceWGSL {
    void WGPUShaderSourceWGSL();
    void SetCode([Const] DOMString code);
    [Value] WGPUChainedStruct GetChain();
    static WGPUShaderSourceWGSL Obtain();
};

[Prefix="JGPU::"]
interface WGPUSupportedFeatures {
    void WGPUSupportedFeatures();
    long GetFeatureCount();
    WGPUFeatureName GetFeatureAt(long index);
    static WGPUSupportedFeatures Obtain();
};

[Prefix="JGPU::"]
interface WGPUBlendComponent {
    void SetOperation(WGPUBlendOperation operation);
    WGPUBlendOperation GetOperation();
    void SetSrcFactor(WGPUBlendFactor factor);
    WGPUBlendFactor GetSrcFactor();
    void SetDstFactor(WGPUBlendFactor factor);
    WGPUBlendFactor GetDstFactor();
};

[Prefix="JGPU::"]
interface WGPUBlendState {
    void WGPUBlendState();
    [Value] WGPUBlendComponent GetColor();
    [Value] WGPUBlendComponent GetAlpha();
    static WGPUBlendState Obtain();
};

[Prefix="JGPU::"]
interface WGPUConstantEntry {
    void WGPUConstantEntry();
};

[Prefix="JGPU::"]
interface WGPUFragmentState {
    void WGPUFragmentState();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetEntryPoint([Const] DOMString entryPoint);
    [BindTo="SetTargets"] void SetTargets__0(WGPUVectorColorTargetState targets);
    [BindTo="SetTargets"] void SetTargets__1(WGPUColorTargetState target01);
    [BindTo="SetTargets"] void SetTargets__2(WGPUColorTargetState target01, WGPUColorTargetState target02);
    [BindTo="SetTargets"] void SetTargets__3(WGPUColorTargetState target01, WGPUColorTargetState target02, WGPUColorTargetState target03);
    [BindTo="SetTargets"] void SetTargets__4(WGPUColorTargetState target01, WGPUColorTargetState target02, WGPUColorTargetState target03, WGPUColorTargetState target04);
    void SetModule(WGPUShaderModule shaderModule);
    void SetConstants(WGPUVectorConstantEntry constants);
    static WGPUFragmentState Obtain();
};

[Prefix="JGPU::"]
interface WGPUVertexAttribute {
    void WGPUVertexAttribute();
    void SetFormat(WGPUVertexFormat format);
    void SetOffset(long offset);
    void SetShaderLocation(long shaderLocation);
    static WGPUVertexAttribute Obtain();
};

[Prefix="JGPU::"]
interface WGPUVertexBufferLayout {
    void WGPUVertexBufferLayout();
    void SetAttributes(WGPUVectorVertexAttribute values);
    void SetArrayStride(long offset);
    void SetStepMode(WGPUVertexStepMode stepMode);
    static WGPUVertexBufferLayout Obtain();
};

[Prefix="JGPU::"]
interface WGPUVertexState {
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetModule(WGPUShaderModule shaderModule);
    void SetEntryPoint([Const] DOMString entryPoint);
    void SetConstants(WGPUVectorConstantEntry constants);
    void SetBuffers(WGPUVectorVertexBufferLayout buffers);
};

[Prefix="JGPU::"]
interface WGPUColorTargetState {
    void WGPUColorTargetState();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetFormat(WGPUTextureFormat format);
    void SetBlend(WGPUBlendState blendState);
    void SetWriteMask(WGPUColorWriteMask writeMask);
    static WGPUColorTargetState Obtain();
};

[Prefix="JGPU::"]
interface WGPUStencilFaceState {
//    void WGPUStencilFaceState();
    void SetCompare(WGPUCompareFunction compare);
    void SetFailOp(WGPUStencilOperation failOp);
    void SetDepthFailOp(WGPUStencilOperation depthFailOp);
    void SetPassOp(WGPUStencilOperation passOp);
//    static WGPUStencilFaceState Obtain();
};

[Prefix="JGPU::"]
interface WGPUDepthStencilState {
    void WGPUDepthStencilState();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetFormat(WGPUTextureFormat format);
    void SetDepthWriteEnabled(WGPUOptionalBool depthWriteEnabled);
    void SetDepthCompare(WGPUCompareFunction depthCompare);
    void SetDepthBiasSlopeScale(float depthBiasSlopeScale);
    void SetDepthBiasClamp(float depthBiasClamp);
    void SetStencilReadMask(long stencilReadMask);
    void SetStencilWriteMask(long stencilWriteMask);
    void SetDepthBias(long depthBias);
    [Value] WGPUStencilFaceState GetStencilFront();
    [Value] WGPUStencilFaceState GetStencilBack();
    static WGPUDepthStencilState Obtain();
};

[Prefix="JGPU::"]
interface WGPUMultisampleState {
    void WGPUMultisampleState();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetCount(long count);
    void SetMask(long mask);
    void SetAlphaToCoverageEnabled(boolean alphaToCoverageEnabled);
};

[Prefix="JGPU::"]
interface WGPUPrimitiveState {
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetTopology(WGPUPrimitiveTopology value);
    void SetStripIndexFormat(WGPUIndexFormat value);
    void SetFrontFace(WGPUFrontFace value);
    void SetCullMode(WGPUCullMode value);
};

[Prefix="JGPU::"]
interface WGPURenderPassDepthStencilAttachment {
    void WGPURenderPassDepthStencilAttachment();
//    void SetNextInChain(WGPUChainedStruct chainedStruct); // TODO dont exist in wgpu-native
    void SetView(WGPUTextureView textureView);
    void SetDepthLoadOp(WGPULoadOp loadOp);
    void SetDepthStoreOp(WGPUStoreOp storeOp);
    void SetDepthClearValue(float depthClearValue);
    void SetDepthReadOnly(boolean depthReadOnly);
    void SetStencilLoadOp(WGPULoadOp loadOp);
    void SetStencilStoreOp(WGPUStoreOp storeOp);
    void SetStencilClearValue(long stencilClearValue);
    void SetStencilReadOnly(boolean stencilReadOnly);
    static WGPURenderPassDepthStencilAttachment Obtain();
};

[Prefix="JGPU::"]
interface WGPURenderPassTimestampWrites {
    void WGPURenderPassTimestampWrites();
    void SetQuerySet(WGPUQuerySet value);
    void SetBeginningOfPassWriteIndex(long value);
    void SetEndOfPassWriteIndex(long value);
    static WGPURenderPassTimestampWrites Obtain();
};

[Prefix="JGPU::"]
interface WGPUComputePassTimestampWrites {
    void SetQuerySet(WGPUQuerySet value);
    void SetBeginningOfPassWriteIndex(long value);
    void SetEndOfPassWriteIndex(long value);
    static WGPUComputePassTimestampWrites Obtain();
};

[Prefix="JGPU::"]
interface WGPUColor {
    void WGPUColor();
    void SetColor(float r, float g, float b, float a);
    void SetR(float value);
    void SetG(float value);
    void SetB(float value);
    void SetA(float value);
    float GetR();
    float GetG();
    float GetB();
    float GetA();
    static WGPUColor Obtain();
};

[Prefix="JGPU::"]
interface WGPURenderPassColorAttachment {
    void WGPURenderPassColorAttachment();
    void Reset();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetView(WGPUTextureView textureView);
    void SetResolveTarget(WGPUTextureView textureView);
    void SetLoadOp(WGPULoadOp loadOp);
    void SetStoreOp(WGPUStoreOp storeOp);
    [Value] WGPUColor GetClearValue();
    void SetDepthSlice(long depthSlice);
    static WGPURenderPassColorAttachment Obtain();
};

[Prefix="JGPU::"]
interface WGPUSurfaceTexture {
    void WGPUSurfaceTexture();
    void GetTexture(WGPUTexture texture);
    WGPUSurfaceGetCurrentTextureStatus GetStatus();
    static WGPUSurfaceTexture Obtain();
};

[Prefix="JGPU::"]
interface WGPUSurfaceCapabilities {
    void WGPUSurfaceCapabilities();
    [Value] WGPUVectorTextureFormat GetFormats();
    static WGPUSurfaceCapabilities Obtain();
};

[Prefix="JGPU::"]
interface WGPUSurfaceConfiguration {
    void WGPUSurfaceConfiguration();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetWidth(long width);
    void SetHeight(long height);
    void SetFormat(WGPUTextureFormat format);
    void SetViewFormats(WGPUVectorTextureFormat formats);
    void SetUsage(WGPUTextureUsage usage);
    void SetDevice(WGPUDevice device);
    void SetPresentMode(WGPUPresentMode presentMode);
    void SetAlphaMode(WGPUCompositeAlphaMode alphaMode);
    static WGPUSurfaceConfiguration Obtain();
};

[Prefix="JGPU::"]
interface WGPUChainedStruct {
    void SetNext(WGPUChainedStruct value);
    void SetSType(WGPUSType type);
};

[Prefix="JGPU::"]
interface WGPUStringView {
    [Const, Value] IDLString GetString();
};

[Prefix="JGPU::"]
interface WGPUOrigin3D {
    void WGPUOrigin3D();
    void Set(long x, long y, long z);
    void SetX(long value);
    void SetY(long value);
    void SetZ(long value);
    static WGPUOrigin3D Obtain();
};

[Prefix="JGPU::"]
interface WGPUTexelCopyTextureInfo {
    void WGPUTexelCopyTextureInfo();
    any GetPtr(); //[-SKIP]
    void SetTexture(WGPUTexture texture);
    void SetMipLevel(long mipLevel);
    [Value] WGPUOrigin3D GetOrigin();
    void SetAspect(WGPUTextureAspect aspect);
    static WGPUTexelCopyTextureInfo Obtain();
};

[Prefix="JGPU::"]
interface WGPUExtent3D {
    void WGPUExtent3D();
    any Get(); //[-SKIP]
    void SetWidth(long width);
    void SetHeight(long height);
    void SetDepthOrArrayLayers(long depthOrArrayLayers);
    static WGPUExtent3D Obtain();
};

[Prefix="JGPU::"]
interface WGPUTexelCopyBufferLayout {
    void WGPUTexelCopyBufferLayout();
    any Get(); //[-SKIP]
    void SetOffset(long offset);
    void SetBytesPerRow(long bytesPerRow);
    void SetRowsPerImage(long rowsPerImage);
    static WGPUTexelCopyBufferLayout Obtain();
};

[Prefix="JGPU::"]
interface WGPUTexelCopyBufferInfo {
    void WGPUTexelCopyBufferInfo();
    [Value] WGPUTexelCopyBufferLayout GetLayout();
    [Value] WGPUBuffer GetBuffer();
    void SetBuffer(WGPUBuffer buffer);
    static WGPUTexelCopyBufferInfo Obtain();
};

[Prefix="JGPU::"]
interface WGPUBindGroupLayoutEntry {
    void WGPUBindGroupLayoutEntry();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetBinding(long binding);
    void SetVisibility(WGPUShaderStage visibility);
    void SetBuffer(WGPUBufferBindingLayout buffer);
    void SetSampler(WGPUSamplerBindingLayout sampler);
    void SetTexture(WGPUTextureBindingLayout texture);
    void SetStorageTexture(WGPUStorageTextureBindingLayout storageTexture);
    [Value] WGPUBufferBindingLayout GetBuffer();
    [Value] WGPUSamplerBindingLayout GetSampler();
    [Value] WGPUStorageTextureBindingLayout GetStorageTexture();
    [Value] WGPUTextureBindingLayout GetTexture();
    static WGPUBindGroupLayoutEntry Obtain();
};

[Prefix="JGPU::"]
interface WGPUBufferBindingLayout {
    void WGPUBufferBindingLayout();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetType(WGPUBufferBindingType type);
    void SetHasDynamicOffset(long hasDynamicOffset);
    void SetMinBindingSize(long minBindingSize);
    static WGPUBufferBindingLayout Obtain();
};

[Prefix="JGPU::"]
interface WGPUSamplerBindingLayout {
    void WGPUSamplerBindingLayout();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetType(WGPUSamplerBindingType type);
    static WGPUSamplerBindingLayout Obtain();
};

[Prefix="JGPU::"]
interface WGPUTextureBindingLayout {
    void WGPUTextureBindingLayout();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetSampleType(WGPUTextureSampleType sampleType);
    void SetViewDimension(WGPUTextureViewDimension viewDimension);
    void SetMultisampled(long multisampled);
    static WGPUTextureBindingLayout Obtain();
};

[Prefix="JGPU::"]
interface WGPUStorageTextureBindingLayout {
    void WGPUStorageTextureBindingLayout();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetAccess(WGPUStorageTextureAccess access);
    void SetFormat(WGPUTextureFormat format);
    void SetViewDimension(WGPUTextureViewDimension viewDimension);
    static WGPUStorageTextureBindingLayout Obtain();
};

[Prefix="JGPU::"]
interface WGPUBindGroupEntry {
    void WGPUBindGroupEntry ();
    void Reset();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetBinding(long binding);
    void SetBuffer(WGPUBuffer buffer);
    void SetOffset(unsigned long long offset);
    void SetSize(unsigned long long size);
    void SetSampler(WGPUSampler sampler);
    void SetTextureView(WGPUTextureView textureView);
    static WGPUBindGroupEntry Obtain();
};

//[Prefix="JGPU::"]
//interface WGPUInstanceCapabilities  { // TODO dawn have different code
//    void SetTimedWaitAnyEnable(boolean enable);
//    void SetTimedWaitAnyMaxCount(long timedWaitAnyMaxCount);
//};

[Prefix="JGPU::"]
interface WGPURenderPassMaxDrawCount  {
    void WGPURenderPassMaxDrawCount ();
    void SetMaxDrawCount(long maxDrawCount);
    long GetMaxDrawCount();
    static WGPURenderPassMaxDrawCount Obtain();
};

[Prefix="JGPU::"]
interface WGPUShaderSourceSPIRV  {
    void WGPUShaderSourceSPIRV ();
    static WGPUShaderSourceSPIRV Obtain();
};

[Prefix="JGPU::"]
interface WGPUSupportedWGSLLanguageFeatures  {
    void WGPUSupportedWGSLLanguageFeatures ();
    long GetFeatureCount();
    WGPUWGSLLanguageFeatureName GetFeatureAt(long index);
    static WGPUSupportedWGSLLanguageFeatures Obtain();
};

[Prefix="JGPU::"]
interface WGPUCompilationInfo  {
    void WGPUCompilationInfo ();
    long GetMessageCount();
    [Value] WGPUCompilationMessage GetMessage(long index);
};

[Prefix="JGPU::"]
interface WGPUCompilationMessage  {
    void WGPUCompilationMessage ();
    [Const, Value] IDLStringView GetMessage();
    WGPUCompilationMessageType GetType();
    long GetLineNum();
    long GetLinePos();
    long GetOffset();
    long GetLength();
    static WGPUCompilationMessage Obtain();
};

// ################################### DESCRIPTOR STRUCTS ###################################

[Prefix="JGPU::"]
interface WGPUInstanceDescriptor {
    void WGPUInstanceDescriptor();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
//    [Value] WGPUInstanceCapabilities GetFeatures();
    static WGPUInstanceDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPURenderBundleDescriptor {
    void WGPURenderBundleDescriptor();
    void SetLabel([Const] DOMString label);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    static WGPURenderBundleDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPURenderBundleEncoderDescriptor {
    void WGPURenderBundleEncoderDescriptor();
    void SetLabel([Const] DOMString label);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetColorFormats(WGPUVectorTextureFormat colorFormats);
    void SetDepthStencilFormat(WGPUTextureFormat depthStencilFormat);
    void SetSampleCount(long sampleCount);
    void SetDepthReadOnly(long depthReadOnly);
    void SetStencilReadOnly(long stencilReadOnly);
    static WGPURenderBundleEncoderDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUQuerySetDescriptor {
    void WGPUQuerySetDescriptor();
    void SetLabel([Const] DOMString label);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetType(WGPUQueryType type);
    void SetCount(long count);
    static WGPUQuerySetDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUSamplerDescriptor {
    void WGPUSamplerDescriptor();
    void SetLabel([Const] DOMString label);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetAddressModeU(WGPUAddressMode addressModeU);
    void SetAddressModeV(WGPUAddressMode addressModeV);
    void SetAddressModeW(WGPUAddressMode addressModeW);
    void SetMagFilter(WGPUFilterMode magFilter);
    void SetMinFilter(WGPUFilterMode minFilter);
    void SetMipmapFilter(WGPUMipmapFilterMode mipmapFilter);
    void SetLodMinClamp(float lodMinClamp);
    void SetLodMaxClamp(float lodMaxClamp);
    void SetCompare(WGPUCompareFunction compare);
    void SetMaxAnisotropy(long maxAnisotropy);
    static WGPUSamplerDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUBindGroupLayoutDescriptor {
    void WGPUBindGroupLayoutDescriptor();
    void SetLabel([Const] DOMString label);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetEntries(WGPUVectorBindGroupLayoutEntry entries);
    static WGPUBindGroupLayoutDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUProgrammableStageDescriptor { // Pointer descriptor
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetModule(WGPUShaderModule shaderModule);
    void SetEntryPoint([Const] DOMString entryPoint);
    void SetConstants(WGPUVectorConstantEntry values);
};

[Prefix="JGPU::"]
interface WGPUComputePipelineDescriptor {
    void WGPUComputePipelineDescriptor();
    void SetLabel([Const] DOMString label);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetLayout(WGPUPipelineLayout layout);
    [Value] WGPUProgrammableStageDescriptor GetCompute();
    static WGPUComputePipelineDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUQueueDescriptor {  // Pointer descriptor
    void SetLabel([Const] DOMString label);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
};

[Prefix="JGPU::"]
interface WGPUShaderModuleDescriptor {
    void WGPUShaderModuleDescriptor();
    void SetLabel([Const] DOMString value);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    static WGPUShaderModuleDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUBindGroupDescriptor {
    void WGPUBindGroupDescriptor();
    void SetLabel([Const] DOMString value);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetLayout(WGPUBindGroupLayout layout);
    void SetEntries(WGPUVectorBindGroupEntry entries);
    static WGPUBindGroupDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUBufferDescriptor {
    void WGPUBufferDescriptor();
    void SetLabel([Const] DOMString label);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetUsage(WGPUBufferUsage usage);
    void SetSize(unsigned long long size);
    void SetMappedAtCreation(boolean mappedAtCreation);
    static WGPUBufferDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUPipelineLayoutDescriptor {
    void WGPUPipelineLayoutDescriptor();
    void SetLabel([Const] DOMString label);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetBindGroupLayouts(WGPUVectorBindGroupLayout bindGroupLayouts);
    static WGPUPipelineLayoutDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUDeviceDescriptor {
    void WGPUDeviceDescriptor();
    void SetLabel([Const] DOMString label);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetRequiredLimits(WGPULimits limits);
    void SetRequiredFeatures(WGPUVectorFeatureName features);
    [Value] WGPUQueueDescriptor GetDefaultQueue();
    static WGPUDeviceDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPURenderPipelineDescriptor {
    void WGPURenderPipelineDescriptor();
    void SetLabel([Const] DOMString value);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    [Value] WGPUVertexState GetVertex();
    [Value] WGPUPrimitiveState GetPrimitive();
    void SetFragment(WGPUFragmentState fragmentState);
    void SetDepthStencil(WGPUDepthStencilState depthStencilState);
    [Value] WGPUMultisampleState GetMultisample();
    void SetLayout(WGPUPipelineLayout pipelineLayout);
    static WGPURenderPipelineDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUCommandEncoderDescriptor {
    void WGPUCommandEncoderDescriptor();
    void SetLabel([Const] DOMString value);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    static WGPUCommandEncoderDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPURenderPassDescriptor {
    void WGPURenderPassDescriptor();
    void SetLabel([Const] DOMString value);
    void Reset();
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    [BindTo="SetColorAttachments"] void SetColorAttachments__0(WGPUVectorRenderPassColorAttachment colorAttachments);
    [BindTo="SetColorAttachments"] void SetColorAttachments__1(WGPURenderPassColorAttachment colorAttachment01);
    [BindTo="SetColorAttachments"] void SetColorAttachments__2(WGPURenderPassColorAttachment colorAttachment01, WGPURenderPassColorAttachment colorAttachment02);
    [BindTo="SetColorAttachments"] void SetColorAttachments__3(WGPURenderPassColorAttachment colorAttachment01, WGPURenderPassColorAttachment colorAttachment02, WGPURenderPassColorAttachment colorAttachment03);
    [BindTo="SetColorAttachments"] void SetColorAttachments__4(WGPURenderPassColorAttachment colorAttachment01, WGPURenderPassColorAttachment colorAttachment02, WGPURenderPassColorAttachment colorAttachment03, WGPURenderPassColorAttachment colorAttachment04);
    void SetDepthStencilAttachment(WGPURenderPassDepthStencilAttachment attachment);
    void SetOcclusionQuerySet(WGPUQuerySet occlusionQuerySet);
    void SetTimestampWrites(WGPURenderPassTimestampWrites timestampWrites);
    static WGPURenderPassDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUCommandBufferDescriptor  {
    void WGPUCommandBufferDescriptor();
    void SetLabel([Const] DOMString value);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    static WGPUCommandBufferDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUComputePassDescriptor {
    void WGPUComputePassDescriptor();
    void SetLabel([Const] DOMString value);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetTimestampWrites(WGPUComputePassTimestampWrites timestampWrites);
    static WGPUComputePassDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUTextureDescriptor {
    void WGPUTextureDescriptor();
    void SetLabel([Const] DOMString value);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetUsage(WGPUTextureUsage usage);
    void SetDimension(WGPUTextureDimension dimension);
    [Value] WGPUExtent3D GetSize();
    void SetFormat(WGPUTextureFormat format);
    void SetMipLevelCount(long mipLevelCount);
    void SetSampleCount(long sampleCount);
    void SetViewFormats(WGPUVectorTextureFormat viewFormats);
    static WGPUTextureDescriptor Obtain();
};

[Prefix="JGPU::"]
interface WGPUTextureViewDescriptor {
    void WGPUTextureViewDescriptor();
    void SetLabel([Const] DOMString value);
    void SetNextInChain(WGPUChainedStruct chainedStruct);
    void SetFormat(WGPUTextureFormat format);
    void SetDimension(WGPUTextureViewDimension dimension);
    void SetBaseMipLevel(long baseMipLevel);
    void SetMipLevelCount(long mipLevelCount);
    void SetBaseArrayLayer(long baseArrayLayer);
    void SetArrayLayerCount(long arrayLayerCount);
    void SetAspect(WGPUTextureAspect aspect);
    void SetUsage(WGPUTextureUsage usage);
    static WGPUTextureViewDescriptor Obtain();
};

// ################################### OPAQUE POINTER ###################################

[Prefix="JGPU::"]
interface WGPUSampler {
    void WGPUSampler();
    void SetLabel([Const] DOMString label);
    void Release();
    boolean IsValid();
};

[Prefix="JGPU::"]
interface WGPURenderBundleEncoder {
    void WGPURenderBundleEncoder();
    void SetLabel([Const] DOMString label);
    void Release();
    void SetPipeline(WGPURenderPipeline renderPipeline);
    void Draw(long vertexCount, long instanceCount, long firstVertex, long firstInstance);
    void DrawIndexed(long indexCount, long instanceCount, long firstIndex, long baseVertex, long firstInstance);
    void DrawIndirect(WGPUBuffer indirectBuffer, long indirectOffset);
    void DrawIndexedIndirect(WGPUBuffer indirectBuffer, long indirectOffset);
    void SetBindGroup(long groupIndex, WGPUBindGroup group, optional WGPUVectorInt dynamicOffsets);
    void SetVertexBuffer(long slot, WGPUBuffer buffer, long offset, long size);
    void SetIndexBuffer(WGPUBuffer buffer, WGPUIndexFormat format, long offset, long size);
    void InsertDebugMarker([Const] DOMString label);
    void PopDebugGroup();
    void PushDebugGroup([Const] DOMString label);
    void Finish(WGPURenderBundleDescriptor descriptor, WGPURenderBundle bundleOut);
    boolean IsValid();
};

[Prefix="JGPU::"]
interface WGPUTextureView {
    void WGPUTextureView();
    void SetLabel([Const] DOMString label);
    void Release();
    boolean IsValid();
    static WGPUTextureView Obtain();
};

[Prefix="JGPU::"]
interface WGPUTexture {
    void WGPUTexture();
    void SetLabel([Const] DOMString label);
    void CreateView(WGPUTextureViewDescriptor textureViewDescriptor, WGPUTextureView textureView);
    WGPUTextureFormat GetFormat();
    void Release();
    void Destroy();
    boolean IsValid();
    static WGPUTexture Obtain();
};

[Prefix="JGPU::"]
interface WGPUShaderModule {
    void WGPUShaderModule();
    void SetLabel([Const] DOMString label);
    void Release();
    boolean IsValid();
    void SetCallback(WGPUCallbackMode callbackMode, WGPUCompilationInfoCallback callback);
    static WGPUShaderModule Obtain();
};

[Prefix="JGPU::"]
interface WGPURenderPipeline {
    void WGPURenderPipeline();
    void SetLabel([Const] DOMString label);
    void Release();
    boolean IsValid();
};

[Prefix="JGPU::"]
interface WGPURenderPassEncoder {
    void WGPURenderPassEncoder();
    void SetLabel([Const] DOMString value);
    void AddRef();
    void Release();
    void End();
    void SetPipeline(WGPURenderPipeline renderPipeline);
    void BeginOcclusionQuery(long queryIndex);
    void Draw(long vertexCount, long instanceCount, long firstVertex, long firstInstance);
    void DrawIndexed(long indexCount, long instanceCount, long firstIndex, long baseVertex, long firstInstance);
    void DrawIndexedIndirect(WGPUBuffer indirectBuffer, long indirectOffset);
    void DrawIndirect(WGPUBuffer indirectBuffer, long indirectOffset);
    void EndOcclusionQuery();
    void ExecuteBundles(WGPUVectorRenderBundle bundles);
    void InsertDebugMarker([Const] DOMString value);
    void PopDebugGroup();
    void PushDebugGroup([Const] DOMString value);
    void SetBindGroup(long groupIndex, WGPUBindGroup group, optional WGPUVectorInt dynamicOffsets);
    void SetBlendConstant(WGPUColor color);
    void SetIndexBuffer(WGPUBuffer buffer, WGPUIndexFormat format, long offset, long size);
    void SetScissorRect(long x, long y, long width, long height);
    void SetStencilReference(long reference);
    void SetVertexBuffer(long slot, WGPUBuffer buffer, long offset, long size);
    void SetViewport(float x, float y, float width, float height, float minDepth, float maxDepth);
    boolean IsValid();
    static WGPURenderPassEncoder Obtain();
};

[Prefix="JGPU::"]
interface WGPUQuerySet {
    void WGPUQuerySet();
    void SetLabel([Const] DOMString value);
    void AddRef();
    void Release();
    void Destroy();
    long GetCount();
    WGPUQueryType GetType();
    boolean IsValid();
};

[Prefix="JGPU::"]
interface WGPUPipelineLayout {
    void WGPUPipelineLayout();
    void SetLabel([Const] DOMString value);
    void Release();
    boolean IsValid();
};

[Prefix="JGPU::"]
interface WGPUComputePassEncoder {
    void WGPUComputePassEncoder();
    void SetLabel([Const] DOMString label);
    void Release();
    void SetDispatchWorkgroups(long workgroupCountX, long workgroupCountY, long workgroupCountZ);
    void DispatchWorkgroupsIndirect(WGPUBuffer indirectBuffer, long indirectOffset);
    void End();
    void InsertDebugMarker([Const] DOMString value);
    void PopDebugGroup();
    void PushDebugGroup([Const] DOMString groupLabel);
    void SetBindGroup(long groupIndex, WGPUBindGroup group, optional WGPUVectorInt offsets);
    void SetPipeline(WGPUComputePipeline pipeline);
    boolean IsValid();
    static WGPUComputePassEncoder Obtain();
};

[Prefix="JGPU::"]
interface WGPUCommandBuffer {
    void WGPUCommandBuffer();
    void SetLabel([Const] DOMString label);
    void Release();
    boolean IsValid();
    static WGPUCommandBuffer Obtain();
};

[Prefix="JGPU::"]
interface WGPUCommandEncoder {
    void WGPUCommandEncoder();
    void SetLabel([Const] DOMString value);
    void Release();
    void BeginComputePass(WGPUComputePassDescriptor descriptor, WGPUComputePassEncoder computePassEncoder);
    void BeginRenderPass(WGPURenderPassDescriptor renderPassDescriptor, WGPURenderPassEncoder renderPassEncoder);
    void ClearBuffer(WGPUBuffer buffer, long offset, long size);
    void CopyBufferToBuffer(WGPUBuffer source, long sourceOffset, WGPUBuffer destination, long destinationOffset, long size);
    void CopyBufferToTexture(WGPUTexelCopyBufferInfo source, WGPUTexelCopyTextureInfo destination, WGPUExtent3D copySize);
    void TextureToBuffer(WGPUTexelCopyTextureInfo source, WGPUTexelCopyBufferInfo destination, WGPUExtent3D copySize);
    void CopyTextureToTexture(WGPUTexelCopyTextureInfo source, WGPUTexelCopyTextureInfo destination, WGPUExtent3D copySize);
    void Finish(WGPUCommandBufferDescriptor descriptor, WGPUCommandBuffer commandBuffer);
    void InsertDebugMarker([Const] DOMString value);
    void PopDebugGroup();
    void PushDebugGroup([Const] DOMString value);
    void ResolveQuerySet(WGPUQuerySet querySet, long firstQuery, long queryCount, WGPUBuffer destination, long destinationOffset);
    void WriteTimestamp(WGPUQuerySet querySet, long queryIndex);
    boolean IsValid();
    static WGPUCommandEncoder Obtain();
};

[Prefix="JGPU::"]
interface WGPUBuffer {
    void WGPUBuffer();
    void SetLabel([Const] DOMString value);
    any Get(); //[-SKIP]
    void Release();
    void Destroy();
    [Value] WGPUFuture MapAsync(WGPUMapMode mode, long offset, long size, WGPUCallbackMode callbackMode, WGPUBufferMapCallback callback);
    void GetConstMappedRange(long offset, long size, octet[] bytes); //[-SKIP]
    [Ref] WGPUByteBuffer GetMappedRange(long offset, long size);
    void Unmap();
    long GetSize();
    WGPUBufferUsage GetUsage();
    boolean IsValid();
};

[Prefix="JGPU::"]
interface WGPUBindGroup {
    void WGPUBindGroup();
    void SetLabel([Const] DOMString value);
    void Release();
    boolean IsValid();
};

[Prefix="JGPU::"]
interface WGPUBindGroupLayout {
    void WGPUBindGroupLayout();
    void SetLabel([Const] DOMString value);
    void Release();
    boolean IsValid();
};

[Prefix="JGPU::"]
interface WGPUComputePipeline {
    void WGPUComputePipeline();
    void SetLabel([Const] DOMString value);
    void Release();
    [Value] WGPUBindGroupLayout GetBindGroupLayout(long groupIndex);
    boolean IsValid();
};

[Prefix="JGPU::"]
interface WGPURenderBundle {
    void WGPURenderBundle();
    void SetLabel([Const] DOMString value);
    void Release();
    boolean IsValid();
};

[Prefix="JGPU::"]
interface WGPUSurface {
    void SetLabel([Const] DOMString value);
    void Unconfigure();
    void Release();
    void Configure(WGPUSurfaceConfiguration config);
    void GetCapabilities(WGPUAdapter adapter, WGPUSurfaceCapabilities surfaceCapabilities);
    void GetCurrentTexture(WGPUSurfaceTexture surfaceTexture);
    void Present();
};

[Prefix="JGPU::"]
interface WGPUQueue {
    any Get(); //[-SKIP]
    void SetLabel([Const] DOMString value);
    [BindTo="Submit"] void Submit__0(WGPUVectorCommandBuffer commandVector);
    [BindTo="Submit"] void Submit__1(WGPUCommandBuffer commandBuffer);
    [BindTo="Submit"] void Submit__2(WGPUCommandBuffer commandBuffer01, WGPUCommandBuffer commandBuffer02);
    [BindTo="Submit"] void Submit__3(WGPUCommandBuffer commandBuffer01, WGPUCommandBuffer commandBuffer02, WGPUCommandBuffer commandBuffer03);
    [BindTo="Submit"] void Submit__4(WGPUCommandBuffer commandBuffer01, WGPUCommandBuffer commandBuffer02, WGPUCommandBuffer commandBuffer03, WGPUCommandBuffer commandBuffer04);
    void Release();
    [BindTo="WriteBuffer"] void WriteBuffer__0(WGPUBuffer buffer, long bufferOffset, octet[] bytes, long dataSize);     //[-SKIP]
    [BindTo="WriteBuffer"] void WriteBuffer__1(WGPUBuffer buffer, long bufferOffset, any bytes, long dataSize);
    [BindTo="WriteTexture"] void WriteTexture__1(WGPUTexelCopyTextureInfo destination, octet[] bytes, long dataSize, WGPUTexelCopyBufferLayout dataLayout, WGPUExtent3D writeSize);  //[-SKIP]
};

[Prefix="JGPU::"]
interface WGPUInstance {
    boolean IsValid();
    void Release();
    void RequestAdapter(WGPURequestAdapterOptions options, WGPUCallbackMode mode, WGPURequestAdapterCallback callback);
    WGPUSurface CreateWebSurface([Const] DOMString canvas);                               //[-NEW_OBJECT]
    WGPUSurface CreateWindowsSurface(any hwnd);                                           //[-NEW_OBJECT]
    WGPUSurface CreateLinuxSurface(boolean isWayland, any windowOrSurface, any display);  //[-NEW_OBJECT]
    WGPUSurface CreateMacSurface(any metalLayer);                                         //[-NEW_OBJECT]
    WGPUSurface CreateAndroidSurface(WGPUAndroidWindow surface);                          //[-NEW_OBJECT]
    void ProcessEvents();
    WGPUWaitStatus WaitAny(WGPUVectorFutureWaitInfo futureVector, long timeoutNS);
};

[Prefix="JGPU::"]
interface WGPUAdapter {
    void Release();
    void RequestDevice(WGPUDeviceDescriptor options, WGPUCallbackMode mode, WGPURequestDeviceCallback callback, WGPUUncapturedErrorCallback errorCallback);
    boolean GetInfo(WGPUAdapterInfo adapterInfo);
    boolean HasFeature(WGPUFeatureName featureName);
    WGPUStatus GetLimits(WGPULimits limits);
};

[Prefix="JGPU::"]
interface WGPUDevice {
    void Release();
    void CreateBindGroup(WGPUBindGroupDescriptor descriptor, WGPUBindGroup valueOut);
    void CreateBindGroupLayout(WGPUBindGroupLayoutDescriptor descriptor, WGPUBindGroupLayout valueOut);
    [BindTo="CreateBuffer"] WGPUBuffer CreateBuffer__0(WGPUBufferDescriptor descriptor);     //[-NEW_OBJECT]
    [BindTo="CreateBuffer"] void CreateBuffer__1(WGPUBufferDescriptor descriptor, WGPUBuffer valueOut);
    void CreateCommandEncoder(WGPUCommandEncoderDescriptor descriptor, WGPUCommandEncoder valueOut);
    void CreateComputePipeline(WGPUComputePipelineDescriptor descriptor, WGPUComputePipeline valueOut);
    void CreatePipelineLayout(WGPUPipelineLayoutDescriptor descriptor, WGPUPipelineLayout valueOut);
    void CreateQuerySet(WGPUQuerySetDescriptor descriptor, WGPUQuerySet valueOut);
    void CreateRenderBundleEncoder(WGPURenderBundleEncoderDescriptor descriptor, WGPURenderBundleEncoder valueOut);
    void CreateRenderPipeline(WGPURenderPipelineDescriptor descriptor, WGPURenderPipeline valueOut);
    void CreateSampler(WGPUSamplerDescriptor descriptor, WGPUSampler valueOut);
    void CreateShaderModule(WGPUShaderModuleDescriptor descriptor, WGPUShaderModule shaderModule);
    void CreateTexture(WGPUTextureDescriptor descriptor, WGPUTexture valueOut);
    void Destroy();
    void GetFeatures(WGPUSupportedFeatures features);
    boolean HasFeature(WGPUFeatureName feature);
    void GetLimits(WGPULimits limits);
    WGPUQueue GetQueue();
};

// ################################### ENUMS ###################################

enum WGPUBufferUsage {
    "WGPUBufferUsage_None",            //[-RENAME=None]
    "WGPUBufferUsage_MapRead",         //[-RENAME=MapRead]
    "WGPUBufferUsage_MapWrite",        //[-RENAME=MapWrite]
    "WGPUBufferUsage_CopySrc",         //[-RENAME=CopySrc]
    "WGPUBufferUsage_CopyDst",         //[-RENAME=CopyDst]
    "WGPUBufferUsage_Index",           //[-RENAME=Index]
    "WGPUBufferUsage_Vertex",          //[-RENAME=Vertex]
    "WGPUBufferUsage_Uniform",         //[-RENAME=Uniform]
    "WGPUBufferUsage_Storage",         //[-RENAME=Storage]
    "WGPUBufferUsage_Indirect",        //[-RENAME=Indirect]
    "WGPUBufferUsage_QueryResolve"     //[-RENAME=QueryResolve]
};

enum WGPUColorWriteMask {
    "WGPUColorWriteMask_None",         //[-RENAME=None]
    "WGPUColorWriteMask_Red",          //[-RENAME=Red]
    "WGPUColorWriteMask_Green",        //[-RENAME=Green]
    "WGPUColorWriteMask_Blue",         //[-RENAME=Blue]
    "WGPUColorWriteMask_Alpha",        //[-RENAME=Alpha]
    "WGPUColorWriteMask_All"           //[-RENAME=All]
};

enum WGPUMapMode {
    "WGPUMapMode_None",                //[-RENAME=None]
    "WGPUMapMode_Read",                //[-RENAME=Read]
    "WGPUMapMode_Write"                //[-RENAME=Write]
};

enum WGPUShaderStage {
    "WGPUShaderStage_None",            //[-RENAME=None]
    "WGPUShaderStage_Vertex",          //[-RENAME=Vertex]
    "WGPUShaderStage_Fragment",        //[-RENAME=Fragment]
    "WGPUShaderStage_Compute"          //[-RENAME=Compute]
};

enum WGPUTextureUsage {
    "WGPUTextureUsage_None",            //[-RENAME=None]
    "WGPUTextureUsage_CopySrc",         //[-RENAME=CopySrc]
    "WGPUTextureUsage_CopyDst",         //[-RENAME=CopyDst]
    "WGPUTextureUsage_TextureBinding",  //[-RENAME=TextureBinding]
    "WGPUTextureUsage_StorageBinding",  //[-RENAME=StorageBinding]
    "WGPUTextureUsage_RenderAttachment" //[-RENAME=RenderAttachment]
};

enum WGPUAdapterType {
    "WGPUAdapterType_DiscreteGPU",     //[-RENAME=DiscreteGPU]
    "WGPUAdapterType_IntegratedGPU",   //[-RENAME=IntegratedGPU]
    "WGPUAdapterType_CPU",             //[-RENAME=CPU]
    "WGPUAdapterType_Unknown",         //[-RENAME=Unknown]
    "WGPUAdapterType_Force32"          //[-RENAME=Force32]
};

enum WGPUAddressMode {
    "WGPUAddressMode_Undefined",       //[-RENAME=Undefined]
    "WGPUAddressMode_ClampToEdge",     //[-RENAME=ClampToEdge]
    "WGPUAddressMode_Repeat",          //[-RENAME=Repeat]
    "WGPUAddressMode_MirrorRepeat",    //[-RENAME=MirrorRepeat]
    "WGPUAddressMode_Force32"          //[-RENAME=Force32]
};

enum WGPUBackendType {
    "WGPUBackendType_Undefined",       //[-RENAME=Undefined]
    "WGPUBackendType_Null",            //[-RENAME=Null]
    "WGPUBackendType_WebGPU",          //[-RENAME=WebGPU]
    "WGPUBackendType_D3D11",           //[-RENAME=D3D11]
    "WGPUBackendType_D3D12",           //[-RENAME=D3D12]
    "WGPUBackendType_Metal",           //[-RENAME=Metal]
    "WGPUBackendType_Vulkan",          //[-RENAME=Vulkan]
    "WGPUBackendType_OpenGL",          //[-RENAME=OpenGL]
    "WGPUBackendType_OpenGLES",        //[-RENAME=OpenGLES]
    "WGPUBackendType_Force32"          //[-RENAME=Force32]
};

enum WGPUBlendFactor {
    "WGPUBlendFactor_Undefined",         //[-RENAME=Undefined]
    "WGPUBlendFactor_Zero",              //[-RENAME=Zero]
    "WGPUBlendFactor_One",               //[-RENAME=One]
    "WGPUBlendFactor_Src",               //[-RENAME=Src]
    "WGPUBlendFactor_OneMinusSrc",       //[-RENAME=OneMinusSrc]
    "WGPUBlendFactor_SrcAlpha",          //[-RENAME=SrcAlpha]
    "WGPUBlendFactor_OneMinusSrcAlpha",  //[-RENAME=OneMinusSrcAlpha]
    "WGPUBlendFactor_Dst",               //[-RENAME=Dst]
    "WGPUBlendFactor_OneMinusDst",       //[-RENAME=OneMinusDst]
    "WGPUBlendFactor_DstAlpha",          //[-RENAME=DstAlpha]
    "WGPUBlendFactor_OneMinusDstAlpha",  //[-RENAME=OneMinusDstAlpha]
    "WGPUBlendFactor_SrcAlphaSaturated", //[-RENAME=SrcAlphaSaturated]
    "WGPUBlendFactor_Constant",          //[-RENAME=Constant]
    "WGPUBlendFactor_OneMinusConstant",  //[-RENAME=OneMinusConstant]
    "WGPUBlendFactor_Src1",              //[-RENAME=Src1]
    "WGPUBlendFactor_OneMinusSrc1",      //[-RENAME=OneMinusSrc1]
    "WGPUBlendFactor_Src1Alpha",         //[-RENAME=Src1Alpha]
    "WGPUBlendFactor_OneMinusSrc1Alpha", //[-RENAME=OneMinusSrc1Alpha]
    "WGPUBlendFactor_Force32"            //[-RENAME=Force32]
};

enum WGPUBlendOperation {
    "WGPUBlendOperation_Undefined",         //[-RENAME=Undefined]
    "WGPUBlendOperation_Add",               //[-RENAME=Add]
    "WGPUBlendOperation_Subtract",          //[-RENAME=Subtract]
    "WGPUBlendOperation_ReverseSubtract",   //[-RENAME=ReverseSubtract]
    "WGPUBlendOperation_Min",               //[-RENAME=Min]
    "WGPUBlendOperation_Max",               //[-RENAME=Max]
    "WGPUBlendOperation_Force32"            //[-RENAME=Force32]
};

enum WGPUBufferBindingType {
    "WGPUBufferBindingType_BindingNotUsed",  //[-RENAME=BindingNotUsed]
    "WGPUBufferBindingType_Undefined",       //[-RENAME=Undefined]
    "WGPUBufferBindingType_Uniform",         //[-RENAME=Uniform]
    "WGPUBufferBindingType_Storage",         //[-RENAME=Storage]
    "WGPUBufferBindingType_ReadOnlyStorage", //[-RENAME=ReadOnlyStorage]
    "WGPUBufferBindingType_Force32"          //[-RENAME=Force32]
};

enum WGPUBufferMapState {
    "WGPUBufferMapState_Unmapped",     //[-RENAME=Unmapped]
    "WGPUBufferMapState_Pending",      //[-RENAME=Pending]
    "WGPUBufferMapState_Mapped",       //[-RENAME=Mapped]
    "WGPUBufferMapState_Force32"       //[-RENAME=Force32]
};

enum WGPUCallbackMode {
    "WGPUCallbackMode_WaitAnyOnly",         //[-RENAME=WaitAnyOnly]
    "WGPUCallbackMode_AllowProcessEvents",  //[-RENAME=AllowProcessEvents]
    "WGPUCallbackMode_AllowSpontaneous",    //[-RENAME=AllowSpontaneous]
    "WGPUCallbackMode_Force32"              //[-RENAME=Force32]
};

enum WGPUCompareFunction {
    "WGPUCompareFunction_Undefined",    //[-RENAME=Undefined]
    "WGPUCompareFunction_Never",        //[-RENAME=Never]
    "WGPUCompareFunction_Less",         //[-RENAME=Less]
    "WGPUCompareFunction_Equal",        //[-RENAME=Equal]
    "WGPUCompareFunction_LessEqual",    //[-RENAME=LessEqual]
    "WGPUCompareFunction_Greater",      //[-RENAME=Greater]
    "WGPUCompareFunction_NotEqual",     //[-RENAME=NotEqual]
    "WGPUCompareFunction_GreaterEqual", //[-RENAME=GreaterEqual]
    "WGPUCompareFunction_Always",       //[-RENAME=Always]
    "WGPUCompareFunction_Force32"       //[-RENAME=Force32]
};

enum WGPUCompilationInfoRequestStatus {
    "WGPUCompilationInfoRequestStatus_Success",              //[-RENAME=Success]
//    "WGPUCompilationInfoRequestStatus_InstanceDropped",      //[-RENAME=InstanceDropped] // TODO dawn is CallbackCancelled
//    "WGPUCompilationInfoRequestStatus_Error",                //[-RENAME=Error]    // TODO missing in dawn
//    "WGPUCompilationInfoRequestStatus_Unknown",              //[-RENAME=Unknown]  // TODO missing in dawn
    // "WGPUCompilationInfoRequestStatus_CallbackCancelled", // TODO missing in wgpu-native header
    "WGPUCompilationInfoRequestStatus_Force32"               //[-RENAME=Force32]
};

enum WGPUCompilationMessageType {
    "WGPUCompilationMessageType_Error",     //[-RENAME=Error]
    "WGPUCompilationMessageType_Warning",   //[-RENAME=Warning]
    "WGPUCompilationMessageType_Info",      //[-RENAME=Info]
    "WGPUCompilationMessageType_Force32"    //[-RENAME=Force32]
};

enum WGPUCompositeAlphaMode {
    "WGPUCompositeAlphaMode_Auto",              //[-RENAME=Auto]
    "WGPUCompositeAlphaMode_Opaque",            //[-RENAME=Opaque]
    "WGPUCompositeAlphaMode_Premultiplied",     //[-RENAME=Premultiplied]
    "WGPUCompositeAlphaMode_Unpremultiplied",   //[-RENAME=Unpremultiplied]
    "WGPUCompositeAlphaMode_Inherit",           //[-RENAME=Inherit]
    "WGPUCompositeAlphaMode_Force32"            //[-RENAME=Force32]
};

enum WGPUCreatePipelineAsyncStatus {
    "WGPUCreatePipelineAsyncStatus_Success",            //[-RENAME=Success]
    // "WGPUCreatePipelineAsyncStatus_CallbackCancelled", // TODO missing in wgpu-native header
    "WGPUCreatePipelineAsyncStatus_ValidationError",    //[-RENAME=ValidationError]
    "WGPUCreatePipelineAsyncStatus_InternalError",      //[-RENAME=InternalError]
    "WGPUCreatePipelineAsyncStatus_Force32"             //[-RENAME=Force32]
};

enum WGPUCullMode {
    "WGPUCullMode_Undefined",          //[-RENAME=Undefined]
    "WGPUCullMode_None",               //[-RENAME=None]
    "WGPUCullMode_Front",              //[-RENAME=Front]
    "WGPUCullMode_Back",               //[-RENAME=Back]
    "WGPUCullMode_Force32"             //[-RENAME=Force32]
};

enum WGPUDeviceLostReason {
    "WGPUDeviceLostReason_Unknown",             //[-RENAME=Unknown]
    "WGPUDeviceLostReason_Destroyed",           //[-RENAME=Destroyed]
    // "WGPUDeviceLostReason_CallbackCancelled", // TODO missing in wgpu-native header
    "WGPUDeviceLostReason_FailedCreation",      //[-RENAME=FailedCreation]
    "WGPUDeviceLostReason_Force32"              //[-RENAME=Force32]
};

enum WGPUErrorFilter {
    "WGPUErrorFilter_Validation",      //[-RENAME=Validation]
    "WGPUErrorFilter_OutOfMemory",     //[-RENAME=OutOfMemory]
    "WGPUErrorFilter_Internal",        //[-RENAME=Internal]
    "WGPUErrorFilter_Force32"          //[-RENAME=Force32]
};

enum WGPUErrorType {
    "WGPUErrorType_NoError",           //[-RENAME=NoError]
    "WGPUErrorType_Validation",        //[-RENAME=Validation]
    "WGPUErrorType_OutOfMemory",       //[-RENAME=OutOfMemory]
    "WGPUErrorType_Internal",          //[-RENAME=Internal]
    "WGPUErrorType_Unknown",           //[-RENAME=Unknown]
    "WGPUErrorType_Force32"            //[-RENAME=Force32]
};

enum WGPUFeatureLevel {
    // "WGPUFeatureLevel_Undefined", // TODO missing in wgpu-native header
    "WGPUFeatureLevel_Compatibility",  //[-RENAME=Compatibility]
    "WGPUFeatureLevel_Core",           //[-RENAME=Core]
    "WGPUFeatureLevel_Force32"         //[-RENAME=Force32]
};

enum WGPUFeatureName {
    "WGPUFeatureName_DepthClipControl",                 //[-RENAME=DepthClipControl]
    "WGPUFeatureName_Depth32FloatStencil8",             //[-RENAME=Depth32FloatStencil8]
    "WGPUFeatureName_TimestampQuery",                   //[-RENAME=TimestampQuery]
    "WGPUFeatureName_TextureCompressionBC",             //[-RENAME=TextureCompressionBC]
    "WGPUFeatureName_TextureCompressionBCSliced3D",     //[-RENAME=TextureCompressionBCSliced3D]
    "WGPUFeatureName_TextureCompressionETC2",           //[-RENAME=TextureCompressionETC2]
    "WGPUFeatureName_TextureCompressionASTC",           //[-RENAME=TextureCompressionASTC]
    "WGPUFeatureName_TextureCompressionASTCSliced3D",   //[-RENAME=TextureCompressionASTCSliced3D]
    "WGPUFeatureName_IndirectFirstInstance",            //[-RENAME=IndirectFirstInstance]
    "WGPUFeatureName_ShaderF16",                        //[-RENAME=ShaderF16]
    "WGPUFeatureName_RG11B10UfloatRenderable",          //[-RENAME=RG11B10UfloatRenderable]
    "WGPUFeatureName_BGRA8UnormStorage",                //[-RENAME=BGRA8UnormStorage]
    "WGPUFeatureName_Float32Filterable",                //[-RENAME=Float32Filterable]
    "WGPUFeatureName_Float32Blendable",                 //[-RENAME=Float32Blendable]
    "WGPUFeatureName_ClipDistances",                    //[-RENAME=ClipDistances]
    "WGPUFeatureName_DualSourceBlending",               //[-RENAME=DualSourceBlending]
    // "WGPUFeatureName_Subgroups",  // TODO missing in wgpu-native header
    // "WGPUFeatureName_CoreFeaturesAndLimits",  // TODO missing in wgpu-native header
    // "WGPUFeatureName_Unorm16TextureFormats",  // TODO missing in wgpu-native header
    // "WGPUFeatureName_Snorm16TextureFormats",  // TODO missing in wgpu-native header
    // "WGPUFeatureName_MultiDrawIndirect",      // TODO missing in wgpu-native header
    "WGPUFeatureName_Force32"          //[-RENAME=Force32]
};

enum WGPUFilterMode {
    "WGPUFilterMode_Undefined",        //[-RENAME=Undefined]
    "WGPUFilterMode_Nearest",          //[-RENAME=Nearest]
    "WGPUFilterMode_Linear",           //[-RENAME=Linear]
    "WGPUFilterMode_Force32"           //[-RENAME=Force32]
};

enum WGPUFrontFace {
    "WGPUFrontFace_Undefined",         //[-RENAME=Undefined]
    "WGPUFrontFace_CCW",               //[-RENAME=CCW]
    "WGPUFrontFace_CW",                //[-RENAME=CW]
    "WGPUFrontFace_Force32"            //[-RENAME=Force32]
};

enum WGPUIndexFormat {
    "WGPUIndexFormat_Undefined",       //[-RENAME=Undefined]
    "WGPUIndexFormat_Uint16",          //[-RENAME=Uint16]
    "WGPUIndexFormat_Uint32",          //[-RENAME=Uint32]
    "WGPUIndexFormat_Force32"          //[-RENAME=Force32]
};

enum WGPULoadOp {
    "WGPULoadOp_Undefined",            //[-RENAME=Undefined]
    "WGPULoadOp_Load",                 //[-RENAME=Load]
    "WGPULoadOp_Clear",                //[-RENAME=Clear]
    "WGPULoadOp_Force32"               //[-RENAME=Force32]
};

enum WGPUMapAsyncStatus {
    "WGPUMapAsyncStatus_Success",      //[-RENAME=Success]
    // "WGPUMapAsyncStatus_CallbackCancelled",   // TODO missing in wgpu-native header
    "WGPUMapAsyncStatus_Error",        //[-RENAME=Error]
    "WGPUMapAsyncStatus_Aborted",      //[-RENAME=Aborted]
    "WGPUMapAsyncStatus_Force32"       //[-RENAME=Force32]
};

enum WGPUMipmapFilterMode {
    "WGPUMipmapFilterMode_Undefined",  //[-RENAME=Undefined]
    "WGPUMipmapFilterMode_Nearest",    //[-RENAME=Nearest]
    "WGPUMipmapFilterMode_Linear",     //[-RENAME=Linear]
    "WGPUMipmapFilterMode_Force32"     //[-RENAME=Force32]
};

enum WGPUOptionalBool {
    "WGPUOptionalBool_False",          //[-RENAME=False]
    "WGPUOptionalBool_True",           //[-RENAME=True]
    "WGPUOptionalBool_Undefined",      //[-RENAME=Undefined]
    "WGPUOptionalBool_Force32"         //[-RENAME=Force32]
};

enum WGPUPopErrorScopeStatus {
    "WGPUPopErrorScopeStatus_Success",      //[-RENAME=Success]
    // "WGPUPopErrorScopeStatus_CallbackCancelled",   // TODO missing in wgpu-native header
    // "WGPUPopErrorScopeStatus_Error",            // TODO missing in wgpu-native header
    "WGPUPopErrorScopeStatus_Force32"       //[-RENAME=Force32]
};

enum WGPUPowerPreference {
    "WGPUPowerPreference_Undefined",        //[-RENAME=Undefined]
    "WGPUPowerPreference_LowPower",         //[-RENAME=LowPower]
    "WGPUPowerPreference_HighPerformance",  //[-RENAME=HighPerformance]
    "WGPUPowerPreference_Force32"           //[-RENAME=Force32]
};

// enum WGPUPredefinedColorSpace {    // TODO missing in wgpu-native header
//     "WGPUPredefinedColorSpace_SRGB", //[-RENAME=SRGB]
//     "WGPUPredefinedColorSpace_DisplayP3", //[-RENAME=DisplayP3]
//     "WGPUPredefinedColorSpace_Force32" //[-RENAME=Force32]
// };

enum WGPUPresentMode {
    "WGPUPresentMode_Undefined",       //[-RENAME=Undefined]
    "WGPUPresentMode_Fifo",            //[-RENAME=Fifo]
    "WGPUPresentMode_FifoRelaxed",     //[-RENAME=FifoRelaxed]
    "WGPUPresentMode_Immediate",       //[-RENAME=Immediate]
    "WGPUPresentMode_Mailbox",         //[-RENAME=Mailbox]
    "WGPUPresentMode_Force32"          //[-RENAME=Force32]
};

enum WGPUPrimitiveTopology {
    "WGPUPrimitiveTopology_Undefined",      //[-RENAME=Undefined]
    "WGPUPrimitiveTopology_PointList",      //[-RENAME=PointList]
    "WGPUPrimitiveTopology_LineList",       //[-RENAME=LineList]
    "WGPUPrimitiveTopology_LineStrip",      //[-RENAME=LineStrip]
    "WGPUPrimitiveTopology_TriangleList",   //[-RENAME=TriangleList]
    "WGPUPrimitiveTopology_TriangleStrip",  //[-RENAME=TriangleStrip]
    "WGPUPrimitiveTopology_Force32"         //[-RENAME=Force32]
};

enum WGPUQueryType {
    "WGPUQueryType_Occlusion",         //[-RENAME=Occlusion]
    "WGPUQueryType_Timestamp",         //[-RENAME=Timestamp]
    "WGPUQueryType_Force32"            //[-RENAME=Force32]
};

enum WGPUQueueWorkDoneStatus {
    "WGPUQueueWorkDoneStatus_Success", //[-RENAME=Success]
    // "WGPUQueueWorkDoneStatus_CallbackCancelled",   // TODO missing in wgpu-native header
    "WGPUQueueWorkDoneStatus_Error",   //[-RENAME=Error]
    "WGPUQueueWorkDoneStatus_Force32"  //[-RENAME=Force32]
};

enum WGPURequestAdapterStatus {
    "WGPURequestAdapterStatus_Success",     //[-RENAME=Success]
    // "WGPURequestAdapterStatus_CallbackCancelled",   // TODO missing in wgpu-native header
    "WGPURequestAdapterStatus_Unavailable", //[-RENAME=Unavailable]
    "WGPURequestAdapterStatus_Error",       //[-RENAME=Error]
    "WGPURequestAdapterStatus_Force32"      //[-RENAME=Force32]
};

enum WGPURequestDeviceStatus {
    "WGPURequestDeviceStatus_Success", //[-RENAME=Success]
    // "WGPURequestDeviceStatus_CallbackCancelled",   // TODO missing in wgpu-native header
    "WGPURequestDeviceStatus_Error",   //[-RENAME=Error]
    "WGPURequestDeviceStatus_Force32"  //[-RENAME=Force32]
};

enum WGPUSamplerBindingType {
    "WGPUSamplerBindingType_BindingNotUsed",    //[-RENAME=BindingNotUsed]
    "WGPUSamplerBindingType_Undefined",         //[-RENAME=Undefined]
    "WGPUSamplerBindingType_Filtering",         //[-RENAME=Filtering]
    "WGPUSamplerBindingType_NonFiltering",      //[-RENAME=NonFiltering]
    "WGPUSamplerBindingType_Comparison",        //[-RENAME=Comparison]
    "WGPUSamplerBindingType_Force32"            //[-RENAME=Force32]
};

enum WGPUStatus {
    "WGPUStatus_Success",              //[-RENAME=Success]
    "WGPUStatus_Error",                //[-RENAME=Error]
    "WGPUStatus_Force32"               //[-RENAME=Force32]
};

enum WGPUStencilOperation {
    "WGPUStencilOperation_Undefined",       //[-RENAME=Undefined]
    "WGPUStencilOperation_Keep",            //[-RENAME=Keep]
    "WGPUStencilOperation_Zero",            //[-RENAME=Zero]
    "WGPUStencilOperation_Replace",         //[-RENAME=Replace]
    "WGPUStencilOperation_Invert",          //[-RENAME=Invert]
    "WGPUStencilOperation_IncrementClamp",  //[-RENAME=IncrementClamp]
    "WGPUStencilOperation_DecrementClamp",  //[-RENAME=DecrementClamp]
    "WGPUStencilOperation_IncrementWrap",   //[-RENAME=IncrementWrap]
    "WGPUStencilOperation_DecrementWrap",   //[-RENAME=DecrementWrap]
    "WGPUStencilOperation_Force32"          //[-RENAME=Force32]
};

enum WGPUStorageTextureAccess {
    "WGPUStorageTextureAccess_BindingNotUsed",  //[-RENAME=BindingNotUsed]
    "WGPUStorageTextureAccess_Undefined",       //[-RENAME=Undefined]
    "WGPUStorageTextureAccess_WriteOnly",       //[-RENAME=WriteOnly]
    "WGPUStorageTextureAccess_ReadOnly",        //[-RENAME=ReadOnly]
    "WGPUStorageTextureAccess_ReadWrite",       //[-RENAME=ReadWrite]
    "WGPUStorageTextureAccess_Force32"          //[-RENAME=Force32]
};

enum WGPUStoreOp {
    "WGPUStoreOp_Undefined",           //[-RENAME=Undefined]
    "WGPUStoreOp_Store",               //[-RENAME=Store]
    "WGPUStoreOp_Discard",             //[-RENAME=Discard]
    "WGPUStoreOp_Force32"              //[-RENAME=Force32]
};

enum WGPUSType {
    "WGPUSType_ShaderSourceSPIRV",                  //[-RENAME=ShaderSourceSPIRV]
    "WGPUSType_ShaderSourceWGSL",                   //[-RENAME=ShaderSourceWGSL]
    "WGPUSType_RenderPassMaxDrawCount",             //[-RENAME=RenderPassMaxDrawCount]
    "WGPUSType_SurfaceSourceMetalLayer",            //[-RENAME=SurfaceSourceMetalLayer]
    "WGPUSType_SurfaceSourceWindowsHWND",           //[-RENAME=SurfaceSourceWindowsHWND]
    "WGPUSType_SurfaceSourceXlibWindow",            //[-RENAME=SurfaceSourceXlibWindow]
    "WGPUSType_SurfaceSourceWaylandSurface",        //[-RENAME=SurfaceSourceWaylandSurface]
    "WGPUSType_SurfaceSourceAndroidNativeWindow",   //[-RENAME=SurfaceSourceAndroidNativeWindow]
    "WGPUSType_SurfaceSourceXCBWindow",             //[-RENAME=SurfaceSourceXCBWindow]
    // "WGPUSType_SurfaceColorManagement",    // TODO missing in wgpu-native header
    // "WGPUSType_RequestAdapterWebXROptions", // TODO missing in wgpu-native header
    // "WGPUSType_AdapterPropertiesSubgroups", // TODO missing in wgpu-native header
    // "WGPUSType_BindGroupLayoutEntryArraySize", // TODO missing in wgpu-native header
    // "WGPUSType_TextureBindingViewDimensionDescriptor",   // TODO missing in wgpu-native header
    // "WGPUSType_EmscriptenSurfaceSourceCanvasHTMLSelector",  // TODO missing in wgpu-native header
    // "WGPUSType_DawnCompilationMessageUtf16",  // TODO missing in wgpu-native header
    "WGPUSType_Force32"                             //[-RENAME=Force32]
};

// enum WGPUSubgroupMatrixComponentType {     // TODO missing in wgpu-native header
//     "WGPUSubgroupMatrixComponentType_F32", //[-RENAME=F32]
//     "WGPUSubgroupMatrixComponentType_F16", //[-RENAME=F16]
//     "WGPUSubgroupMatrixComponentType_U32", //[-RENAME=U32]
//     "WGPUSubgroupMatrixComponentType_I32", //[-RENAME=I32]
//     "WGPUSubgroupMatrixComponentType_Force32" //[-RENAME=Force32]
// };

enum WGPUSurfaceGetCurrentTextureStatus {
    "WGPUSurfaceGetCurrentTextureStatus_SuccessOptimal",    //[-RENAME=SuccessOptimal]
    "WGPUSurfaceGetCurrentTextureStatus_SuccessSuboptimal", //[-RENAME=SuccessSuboptimal]
    "WGPUSurfaceGetCurrentTextureStatus_Timeout",           //[-RENAME=Timeout]
    "WGPUSurfaceGetCurrentTextureStatus_Outdated",          //[-RENAME=Outdated]
    "WGPUSurfaceGetCurrentTextureStatus_Lost",              //[-RENAME=Lost]
    "WGPUSurfaceGetCurrentTextureStatus_Error",             //[-RENAME=Error]
    "WGPUSurfaceGetCurrentTextureStatus_Force32"            //[-RENAME=Force32]
};

enum WGPUTextureAspect {
    "WGPUTextureAspect_Undefined",     //[-RENAME=Undefined]
    "WGPUTextureAspect_All",           //[-RENAME=All]
    "WGPUTextureAspect_StencilOnly",   //[-RENAME=StencilOnly]
    "WGPUTextureAspect_DepthOnly",     //[-RENAME=DepthOnly]
    "WGPUTextureAspect_Force32"        //[-RENAME=Force32]
};

enum WGPUTextureDimension {
    "WGPUTextureDimension_Undefined",  //[-RENAME=Undefined]
    "WGPUTextureDimension_1D",         //[-RENAME=_1D]
    "WGPUTextureDimension_2D",         //[-RENAME=_2D]
    "WGPUTextureDimension_3D",         //[-RENAME=_3D]
    "WGPUTextureDimension_Force32"     //[-RENAME=Force32]
};

enum WGPUTextureFormat {
    "WGPUTextureFormat_Undefined",     //[-RENAME=Undefined]
    "WGPUTextureFormat_R8Unorm",       //[-RENAME=R8Unorm]
    "WGPUTextureFormat_R8Snorm",       //[-RENAME=R8Snorm]
    "WGPUTextureFormat_R8Uint",        //[-RENAME=R8Uint]
    "WGPUTextureFormat_R8Sint",        //[-RENAME=R8Sint]
    "WGPUTextureFormat_R16Uint",       //[-RENAME=R16Uint]
    "WGPUTextureFormat_R16Sint",       //[-RENAME=R16Sint]
    "WGPUTextureFormat_R16Float",      //[-RENAME=R16Float]
    "WGPUTextureFormat_RG8Unorm",      //[-RENAME=RG8Unorm]
    "WGPUTextureFormat_RG8Snorm",      //[-RENAME=RG8Snorm]
    "WGPUTextureFormat_RG8Uint",       //[-RENAME=RG8Uint]
    "WGPUTextureFormat_RG8Sint",       //[-RENAME=RG8Sint]
    "WGPUTextureFormat_R32Float",      //[-RENAME=R32Float]
    "WGPUTextureFormat_R32Uint",       //[-RENAME=R32Uint]
    "WGPUTextureFormat_R32Sint",       //[-RENAME=R32Sint]
    "WGPUTextureFormat_RG16Uint",      //[-RENAME=RG16Uint]
    "WGPUTextureFormat_RG16Sint",      //[-RENAME=RG16Sint]
    "WGPUTextureFormat_RG16Float",     //[-RENAME=RG16Float]
    "WGPUTextureFormat_RGBA8Unorm",    //[-RENAME=RGBA8Unorm]
    "WGPUTextureFormat_RGBA8UnormSrgb", //[-RENAME=RGBA8UnormSrgb]
    "WGPUTextureFormat_RGBA8Snorm",    //[-RENAME=RGBA8Snorm]
    "WGPUTextureFormat_RGBA8Uint",     //[-RENAME=RGBA8Uint]
    "WGPUTextureFormat_RGBA8Sint",     //[-RENAME=RGBA8Sint]
    "WGPUTextureFormat_BGRA8Unorm",    //[-RENAME=BGRA8Unorm]
    "WGPUTextureFormat_BGRA8UnormSrgb", //[-RENAME=BGRA8UnormSrgb]
    "WGPUTextureFormat_RGB10A2Uint",   //[-RENAME=RGB10A2Uint]
    "WGPUTextureFormat_RGB10A2Unorm",  //[-RENAME=RGB10A2Unorm]
    "WGPUTextureFormat_RG11B10Ufloat", //[-RENAME=RG11B10Ufloat]
    "WGPUTextureFormat_RGB9E5Ufloat",  //[-RENAME=RGB9E5Ufloat]
    "WGPUTextureFormat_RG32Float",     //[-RENAME=RG32Float]
    "WGPUTextureFormat_RG32Uint",      //[-RENAME=RG32Uint]
    "WGPUTextureFormat_RG32Sint",      //[-RENAME=RG32Sint]
    "WGPUTextureFormat_RGBA16Uint",    //[-RENAME=RGBA16Uint]
    "WGPUTextureFormat_RGBA16Sint",    //[-RENAME=RGBA16Sint]
    "WGPUTextureFormat_RGBA16Float",   //[-RENAME=RGBA16Float]
    "WGPUTextureFormat_RGBA32Float",   //[-RENAME=RGBA32Float]
    "WGPUTextureFormat_RGBA32Uint",    //[-RENAME=RGBA32Uint]
    "WGPUTextureFormat_RGBA32Sint",    //[-RENAME=RGBA32Sint]
    "WGPUTextureFormat_Stencil8",      //[-RENAME=Stencil8]
    "WGPUTextureFormat_Depth16Unorm",  //[-RENAME=Depth16Unorm]
    "WGPUTextureFormat_Depth24Plus",   //[-RENAME=Depth24Plus]
    "WGPUTextureFormat_Depth24PlusStencil8", //[-RENAME=Depth24PlusStencil8]
    "WGPUTextureFormat_Depth32Float",  //[-RENAME=Depth32Float]
    "WGPUTextureFormat_Depth32FloatStencil8", //[-RENAME=Depth32FloatStencil8]
    "WGPUTextureFormat_BC1RGBAUnorm",  //[-RENAME=BC1RGBAUnorm]
    "WGPUTextureFormat_BC1RGBAUnormSrgb", //[-RENAME=BC1RGBAUnormSrgb]
    "WGPUTextureFormat_BC2RGBAUnorm",  //[-RENAME=BC2RGBAUnorm]
    "WGPUTextureFormat_BC2RGBAUnormSrgb", //[-RENAME=BC2RGBAUnormSrgb]
    "WGPUTextureFormat_BC3RGBAUnorm",  //[-RENAME=BC3RGBAUnorm]
    "WGPUTextureFormat_BC3RGBAUnormSrgb", //[-RENAME=BC3RGBAUnormSrgb]
    "WGPUTextureFormat_BC4RUnorm",     //[-RENAME=BC4RUnorm]
    "WGPUTextureFormat_BC4RSnorm",     //[-RENAME=BC4RSnorm]
    "WGPUTextureFormat_BC5RGUnorm",    //[-RENAME=BC5RGUnorm]
    "WGPUTextureFormat_BC5RGSnorm",    //[-RENAME=BC5RGSnorm]
    "WGPUTextureFormat_BC6HRGBUfloat", //[-RENAME=BC6HRGBUfloat]
    "WGPUTextureFormat_BC6HRGBFloat",  //[-RENAME=BC6HRGBFloat]
    "WGPUTextureFormat_BC7RGBAUnorm",  //[-RENAME=BC7RGBAUnorm]
    "WGPUTextureFormat_BC7RGBAUnormSrgb", //[-RENAME=BC7RGBAUnormSrgb]
    "WGPUTextureFormat_ETC2RGB8Unorm", //[-RENAME=ETC2RGB8Unorm]
    "WGPUTextureFormat_ETC2RGB8UnormSrgb", //[-RENAME=ETC2RGB8UnormSrgb]
    "WGPUTextureFormat_ETC2RGB8A1Unorm", //[-RENAME=ETC2RGB8A1Unorm]
    "WGPUTextureFormat_ETC2RGB8A1UnormSrgb", //[-RENAME=ETC2RGB8A1UnormSrgb]
    "WGPUTextureFormat_ETC2RGBA8Unorm", //[-RENAME=ETC2RGBA8Unorm]
    "WGPUTextureFormat_ETC2RGBA8UnormSrgb", //[-RENAME=ETC2RGBA8UnormSrgb]
    "WGPUTextureFormat_EACR11Unorm",   //[-RENAME=EACR11Unorm]
    "WGPUTextureFormat_EACR11Snorm",   //[-RENAME=EACR11Snorm]
    "WGPUTextureFormat_EACRG11Unorm",  //[-RENAME=EACRG11Unorm]
    "WGPUTextureFormat_EACRG11Snorm",  //[-RENAME=EACRG11Snorm]
    "WGPUTextureFormat_ASTC4x4Unorm",  //[-RENAME=ASTC4x4Unorm]
    "WGPUTextureFormat_ASTC4x4UnormSrgb", //[-RENAME=ASTC4x4UnormSrgb]
    "WGPUTextureFormat_ASTC5x4Unorm",  //[-RENAME=ASTC5x4Unorm]
    "WGPUTextureFormat_ASTC5x4UnormSrgb", //[-RENAME=ASTC5x4UnormSrgb]
    "WGPUTextureFormat_ASTC5x5Unorm",  //[-RENAME=ASTC5x5Unorm]
    "WGPUTextureFormat_ASTC5x5UnormSrgb", //[-RENAME=ASTC5x5UnormSrgb]
    "WGPUTextureFormat_ASTC6x5Unorm",  //[-RENAME=ASTC6x5Unorm]
    "WGPUTextureFormat_ASTC6x5UnormSrgb", //[-RENAME=ASTC6x5UnormSrgb]
    "WGPUTextureFormat_ASTC6x6Unorm",  //[-RENAME=ASTC6x6Unorm]
    "WGPUTextureFormat_ASTC6x6UnormSrgb", //[-RENAME=ASTC6x6UnormSrgb]
    "WGPUTextureFormat_ASTC8x5Unorm",  //[-RENAME=ASTC8x5Unorm]
    "WGPUTextureFormat_ASTC8x5UnormSrgb", //[-RENAME=ASTC8x5UnormSrgb]
    "WGPUTextureFormat_ASTC8x6Unorm",  //[-RENAME=ASTC8x6Unorm]
    "WGPUTextureFormat_ASTC8x6UnormSrgb", //[-RENAME=ASTC8x6UnormSrgb]
    "WGPUTextureFormat_ASTC8x8Unorm",  //[-RENAME=ASTC8x8Unorm]
    "WGPUTextureFormat_ASTC8x8UnormSrgb", //[-RENAME=ASTC8x8UnormSrgb]
    "WGPUTextureFormat_ASTC10x5Unorm", //[-RENAME=ASTC10x5Unorm]
    "WGPUTextureFormat_ASTC10x5UnormSrgb", //[-RENAME=ASTC10x5UnormSrgb]
    "WGPUTextureFormat_ASTC10x6Unorm", //[-RENAME=ASTC10x6Unorm]
    "WGPUTextureFormat_ASTC10x6UnormSrgb", //[-RENAME=ASTC10x6UnormSrgb]
    "WGPUTextureFormat_ASTC10x8Unorm", //[-RENAME=ASTC10x8Unorm]
    "WGPUTextureFormat_ASTC10x8UnormSrgb", //[-RENAME=ASTC10x8UnormSrgb]
    "WGPUTextureFormat_ASTC10x10Unorm", //[-RENAME=ASTC10x10Unorm]
    "WGPUTextureFormat_ASTC10x10UnormSrgb", //[-RENAME=ASTC10x10UnormSrgb]
    "WGPUTextureFormat_ASTC12x10Unorm", //[-RENAME=ASTC12x10Unorm]
    "WGPUTextureFormat_ASTC12x10UnormSrgb", //[-RENAME=ASTC12x10UnormSrgb]
    "WGPUTextureFormat_ASTC12x12Unorm", //[-RENAME=ASTC12x12Unorm]
    "WGPUTextureFormat_ASTC12x12UnormSrgb", //[-RENAME=ASTC12x12UnormSrgb]
    "WGPUTextureFormat_Force32"        //[-RENAME=Force32]
};

enum WGPUTextureSampleType {
    "WGPUTextureSampleType_BindingNotUsed", //[-RENAME=BindingNotUsed]
    "WGPUTextureSampleType_Undefined", //[-RENAME=Undefined]
    "WGPUTextureSampleType_Float",     //[-RENAME=Float]
    "WGPUTextureSampleType_UnfilterableFloat", //[-RENAME=UnfilterableFloat]
    "WGPUTextureSampleType_Depth",     //[-RENAME=Depth]
    "WGPUTextureSampleType_Sint",      //[-RENAME=Sint]
    "WGPUTextureSampleType_Uint",      //[-RENAME=Uint]
    "WGPUTextureSampleType_Force32"    //[-RENAME=Force32]
};

enum WGPUTextureViewDimension {
    "WGPUTextureViewDimension_Undefined", //[-RENAME=Undefined]
    "WGPUTextureViewDimension_1D",     //[-RENAME=_1D]
    "WGPUTextureViewDimension_2D",     //[-RENAME=_2D]
    "WGPUTextureViewDimension_2DArray", //[-RENAME=_2DArray]
    "WGPUTextureViewDimension_Cube",   //[-RENAME=Cube]
    "WGPUTextureViewDimension_CubeArray", //[-RENAME=CubeArray]
    "WGPUTextureViewDimension_3D",     //[-RENAME=_3D]
    "WGPUTextureViewDimension_Force32" //[-RENAME=Force32]
};

// enum WGPUToneMappingMode {    // TODO missing in wgpu-native header
//     "WGPUToneMappingMode_Standard", //[-RENAME=Standard]
//     "WGPUToneMappingMode_Extended", //[-RENAME=Extended]
//     "WGPUToneMappingMode_Force32" //[-RENAME=Force32]
// };

enum WGPUVertexFormat {
    "WGPUVertexFormat_Uint8",          //[-RENAME=Uint8]
    "WGPUVertexFormat_Uint8x2",        //[-RENAME=Uint8x2]
    "WGPUVertexFormat_Uint8x4",        //[-RENAME=Uint8x4]
    "WGPUVertexFormat_Sint8",          //[-RENAME=Sint8]
    "WGPUVertexFormat_Sint8x2",        //[-RENAME=Sint8x2]
    "WGPUVertexFormat_Sint8x4",        //[-RENAME=Sint8x4]
    "WGPUVertexFormat_Unorm8",         //[-RENAME=Unorm8]
    "WGPUVertexFormat_Unorm8x2",       //[-RENAME=Unorm8x2]
    "WGPUVertexFormat_Unorm8x4",       //[-RENAME=Unorm8x4]
    "WGPUVertexFormat_Snorm8",         //[-RENAME=Snorm8]
    "WGPUVertexFormat_Snorm8x2",       //[-RENAME=Snorm8x2]
    "WGPUVertexFormat_Snorm8x4",       //[-RENAME=Snorm8x4]
    "WGPUVertexFormat_Uint16",         //[-RENAME=Uint16]
    "WGPUVertexFormat_Uint16x2",       //[-RENAME=Uint16x2]
    "WGPUVertexFormat_Uint16x4",       //[-RENAME=Uint16x4]
    "WGPUVertexFormat_Sint16",         //[-RENAME=Sint16]
    "WGPUVertexFormat_Sint16x2",       //[-RENAME=Sint16x2]
    "WGPUVertexFormat_Sint16x4",       //[-RENAME=Sint16x4]
    "WGPUVertexFormat_Unorm16",        //[-RENAME=Unorm16]
    "WGPUVertexFormat_Unorm16x2",      //[-RENAME=Unorm16x2]
    "WGPUVertexFormat_Unorm16x4",      //[-RENAME=Unorm16x4]
    "WGPUVertexFormat_Snorm16",        //[-RENAME=Snorm16]
    "WGPUVertexFormat_Snorm16x2",      //[-RENAME=Snorm16x2]
    "WGPUVertexFormat_Snorm16x4",      //[-RENAME=Snorm16x4]
    "WGPUVertexFormat_Float16",        //[-RENAME=Float16]
    "WGPUVertexFormat_Float16x2",      //[-RENAME=Float16x2]
    "WGPUVertexFormat_Float16x4",      //[-RENAME=Float16x4]
    "WGPUVertexFormat_Float32",        //[-RENAME=Float32]
    "WGPUVertexFormat_Float32x2",      //[-RENAME=Float32x2]
    "WGPUVertexFormat_Float32x3",      //[-RENAME=Float32x3]
    "WGPUVertexFormat_Float32x4",      //[-RENAME=Float32x4]
    "WGPUVertexFormat_Uint32",         //[-RENAME=Uint32]
    "WGPUVertexFormat_Uint32x2",       //[-RENAME=Uint32x2]
    "WGPUVertexFormat_Uint32x3",       //[-RENAME=Uint32x3]
    "WGPUVertexFormat_Uint32x4",       //[-RENAME=Uint32x4]
    "WGPUVertexFormat_Sint32",         //[-RENAME=Sint32]
    "WGPUVertexFormat_Sint32x2",       //[-RENAME=Sint32x2]
    "WGPUVertexFormat_Sint32x3",       //[-RENAME=Sint32x3]
    "WGPUVertexFormat_Sint32x4",       //[-RENAME=Sint32x4]
    "WGPUVertexFormat_Unorm10_10_10_2", //[-RENAME=Unorm10_10_10_2]
    "WGPUVertexFormat_Unorm8x4BGRA",   //[-RENAME=Unorm8x4BGRA]
    "WGPUVertexFormat_Force32"         //[-RENAME=Force32]
};

enum WGPUVertexStepMode {
    "WGPUVertexStepMode_Undefined",    //[-RENAME=Undefined]
    "WGPUVertexStepMode_Vertex",       //[-RENAME=Vertex]
    "WGPUVertexStepMode_Instance",    //[-RENAME=Instance]
    "WGPUVertexStepMode_Force32"       //[-RENAME=Force32]
};

enum WGPUWaitStatus {
    "WGPUWaitStatus_Success",          //[-RENAME=Success]
    "WGPUWaitStatus_TimedOut",         //[-RENAME=TimedOut]
    // "WGPUWaitStatus_Error",    // TODO missing in wgpu-native header
    "WGPUWaitStatus_Force32"           //[-RENAME=Force32]
};

enum WGPUWGSLLanguageFeatureName {
    "WGPUWGSLLanguageFeatureName_ReadonlyAndReadwriteStorageTextures",  //[-RENAME=ReadonlyAndReadwriteStorageTextures]
    "WGPUWGSLLanguageFeatureName_Packed4x8IntegerDotProduct",           //[-RENAME=Packed4x8IntegerDotProduct]
    "WGPUWGSLLanguageFeatureName_UnrestrictedPointerParameters",        //[-RENAME=UnrestrictedPointerParameters]
    "WGPUWGSLLanguageFeatureName_PointerCompositeAccess",               //[-RENAME=PointerCompositeAccess]
    // "WGPUWGSLLanguageFeatureName_SizedBindingArray",   // TODO missing in wgpu-native header
    "WGPUWGSLLanguageFeatureName_Force32"                               //[-RENAME=Force32]
};
