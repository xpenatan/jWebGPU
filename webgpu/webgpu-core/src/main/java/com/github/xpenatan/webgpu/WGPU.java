/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.jParser.idl.IDLBase;

public class WGPU extends IDLBase {

    static private WGPUInstance WGPUInstance_TEMP_STATIC_GEN_0;

    static private STBImage STBImage_TEMP_STATIC_GEN_0;

    static private STBImage STBImage_TEMP_STATIC_GEN_1;

    static public final WGPU NULL = WGPU.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPU(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPU native_new() {
        return new WGPU((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
WGPU* nativeObject = (WGPU*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public static WGPUPlatformType getPlatformType() {
        int value = internal_native_GetPlatformType();
        return WGPUPlatformType.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
return (int)WGPU::GetPlatformType();
*/
    public static native int internal_native_GetPlatformType();

    public static WGPUInstance setupInstance(WGPUInstanceDescriptor descriptor) {
        long pointer = internal_native_SetupInstance(descriptor.native_address);
        if (pointer == 0)
            return WGPUInstance.NULL;
        WGPUInstance WGPUInstance_NEW = WGPUInstance.native_new();
        WGPUInstance_NEW.internal_reset(pointer, true);
        return WGPUInstance_NEW;
    }

    /*[-JNI;-NATIVE]
return (jlong)WGPU::SetupInstance((JGPU::WGPUInstanceDescriptor* )descriptor_addr);
*/
    public static native long internal_native_SetupInstance(long descriptor_addr);

    public static WGPUInstance setupInstance() {
        long pointer = internal_native_SetupInstance();
        if (pointer == 0)
            return WGPUInstance.NULL;
        if (WGPUInstance_TEMP_STATIC_GEN_0 == null)
            WGPUInstance_TEMP_STATIC_GEN_0 = WGPUInstance.native_new();
        WGPUInstance_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPUInstance_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)WGPU::SetupInstance();
*/
    public static native long internal_native_SetupInstance();

    public static STBImage loadImage(WGPUByteBuffer buffer, int desiredChannels) {
        long pointer = internal_native_loadImage(buffer.native_address, desiredChannels);
        if (pointer == 0)
            return STBImage.NULL;
        if (STBImage_TEMP_STATIC_GEN_0 == null)
            STBImage_TEMP_STATIC_GEN_0 = STBImage.native_new();
        STBImage_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return STBImage_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)WGPU::loadImage((WGPUByteBuffer* )buffer_addr, (int)desiredChannels);
*/
    public static native long internal_native_loadImage(long buffer_addr, int desiredChannels);

    public static STBImage loadImage(WGPUByteBuffer buffer) {
        long pointer = internal_native_loadImage(buffer.native_address);
        if (pointer == 0)
            return STBImage.NULL;
        if (STBImage_TEMP_STATIC_GEN_1 == null)
            STBImage_TEMP_STATIC_GEN_1 = STBImage.native_new();
        STBImage_TEMP_STATIC_GEN_1.internal_reset(pointer, false);
        return STBImage_TEMP_STATIC_GEN_1;
    }

    /*[-JNI;-NATIVE]
return (jlong)WGPU::loadImage((WGPUByteBuffer* )buffer_addr);
*/
    public static native long internal_native_loadImage(long buffer_addr);
}
