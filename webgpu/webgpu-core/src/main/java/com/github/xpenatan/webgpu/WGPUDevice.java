/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.jParser.idl.IDLBase;

public class WGPUDevice extends IDLBase {

    private WGPUQueue WGPUQueue_TEMP_GEN_0;

    static public final WGPUDevice NULL = WGPUDevice.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUDevice(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUDevice native_new() {
        return new WGPUDevice((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void release() {
        internal_native_Release(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->Release();
*/
    public static native void internal_native_Release(long this_addr);

    public void createBindGroup(WGPUBindGroupDescriptor descriptor, WGPUBindGroup valueOut) {
        internal_native_CreateBindGroup(native_address, descriptor.native_address, valueOut.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->CreateBindGroup((JGPU::WGPUBindGroupDescriptor* )descriptor_addr, (JGPU::WGPUBindGroup* )valueOut_addr);
*/
    public static native void internal_native_CreateBindGroup(long this_addr, long descriptor_addr, long valueOut_addr);

    public void createBindGroupLayout(WGPUBindGroupLayoutDescriptor descriptor, WGPUBindGroupLayout valueOut) {
        internal_native_CreateBindGroupLayout(native_address, descriptor.native_address, valueOut.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->CreateBindGroupLayout((JGPU::WGPUBindGroupLayoutDescriptor* )descriptor_addr, (JGPU::WGPUBindGroupLayout* )valueOut_addr);
*/
    public static native void internal_native_CreateBindGroupLayout(long this_addr, long descriptor_addr, long valueOut_addr);

    public WGPUBuffer createBuffer(WGPUBufferDescriptor descriptor) {
        long pointer = internal_native_CreateBuffer__0(native_address, descriptor.native_address);
        if (pointer == 0)
            return WGPUBuffer.NULL;
        WGPUBuffer WGPUBuffer_NEW = WGPUBuffer.native_new();
        WGPUBuffer_NEW.internal_reset(pointer, true);
        return WGPUBuffer_NEW;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
JGPU::WGPUBuffer* obj = nativeObject->CreateBuffer((JGPU::WGPUBufferDescriptor* )descriptor_addr);
return (jlong)obj;
*/
    public static native long internal_native_CreateBuffer__0(long this_addr, long descriptor_addr);

    public void createBuffer(WGPUBufferDescriptor descriptor, WGPUBuffer valueOut) {
        internal_native_CreateBuffer__1(native_address, descriptor.native_address, valueOut.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->CreateBuffer((JGPU::WGPUBufferDescriptor* )descriptor_addr, (JGPU::WGPUBuffer* )valueOut_addr);
*/
    public static native void internal_native_CreateBuffer__1(long this_addr, long descriptor_addr, long valueOut_addr);

    public void createCommandEncoder(WGPUCommandEncoderDescriptor descriptor, WGPUCommandEncoder valueOut) {
        internal_native_CreateCommandEncoder(native_address, descriptor.native_address, valueOut.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->CreateCommandEncoder((JGPU::WGPUCommandEncoderDescriptor* )descriptor_addr, (JGPU::WGPUCommandEncoder* )valueOut_addr);
*/
    public static native void internal_native_CreateCommandEncoder(long this_addr, long descriptor_addr, long valueOut_addr);

    public void createComputePipeline(WGPUComputePipelineDescriptor descriptor, WGPUComputePipeline valueOut) {
        internal_native_CreateComputePipeline(native_address, descriptor.native_address, valueOut.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->CreateComputePipeline((JGPU::WGPUComputePipelineDescriptor* )descriptor_addr, (JGPU::WGPUComputePipeline* )valueOut_addr);
*/
    public static native void internal_native_CreateComputePipeline(long this_addr, long descriptor_addr, long valueOut_addr);

    public void createPipelineLayout(WGPUPipelineLayoutDescriptor descriptor, WGPUPipelineLayout valueOut) {
        internal_native_CreatePipelineLayout(native_address, descriptor.native_address, valueOut.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->CreatePipelineLayout((JGPU::WGPUPipelineLayoutDescriptor* )descriptor_addr, (JGPU::WGPUPipelineLayout* )valueOut_addr);
*/
    public static native void internal_native_CreatePipelineLayout(long this_addr, long descriptor_addr, long valueOut_addr);

    public void createQuerySet(WGPUQuerySetDescriptor descriptor, WGPUQuerySet valueOut) {
        internal_native_CreateQuerySet(native_address, descriptor.native_address, valueOut.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->CreateQuerySet((JGPU::WGPUQuerySetDescriptor* )descriptor_addr, (JGPU::WGPUQuerySet* )valueOut_addr);
*/
    public static native void internal_native_CreateQuerySet(long this_addr, long descriptor_addr, long valueOut_addr);

    public void createRenderBundleEncoder(WGPURenderBundleEncoderDescriptor descriptor, WGPURenderBundleEncoder valueOut) {
        internal_native_CreateRenderBundleEncoder(native_address, descriptor.native_address, valueOut.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->CreateRenderBundleEncoder((JGPU::WGPURenderBundleEncoderDescriptor* )descriptor_addr, (JGPU::WGPURenderBundleEncoder* )valueOut_addr);
*/
    public static native void internal_native_CreateRenderBundleEncoder(long this_addr, long descriptor_addr, long valueOut_addr);

    public void createRenderPipeline(WGPURenderPipelineDescriptor descriptor, WGPURenderPipeline valueOut) {
        internal_native_CreateRenderPipeline(native_address, descriptor.native_address, valueOut.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->CreateRenderPipeline((JGPU::WGPURenderPipelineDescriptor* )descriptor_addr, (JGPU::WGPURenderPipeline* )valueOut_addr);
*/
    public static native void internal_native_CreateRenderPipeline(long this_addr, long descriptor_addr, long valueOut_addr);

    public void createSampler(WGPUSamplerDescriptor descriptor, WGPUSampler valueOut) {
        internal_native_CreateSampler(native_address, descriptor.native_address, valueOut.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->CreateSampler((JGPU::WGPUSamplerDescriptor* )descriptor_addr, (JGPU::WGPUSampler* )valueOut_addr);
*/
    public static native void internal_native_CreateSampler(long this_addr, long descriptor_addr, long valueOut_addr);

    public void createShaderModule(WGPUShaderModuleDescriptor descriptor, WGPUShaderModule shaderModule) {
        internal_native_CreateShaderModule(native_address, descriptor.native_address, shaderModule.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->CreateShaderModule((JGPU::WGPUShaderModuleDescriptor* )descriptor_addr, (JGPU::WGPUShaderModule* )shaderModule_addr);
*/
    public static native void internal_native_CreateShaderModule(long this_addr, long descriptor_addr, long shaderModule_addr);

    public void createTexture(WGPUTextureDescriptor descriptor, WGPUTexture valueOut) {
        internal_native_CreateTexture(native_address, descriptor.native_address, valueOut.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->CreateTexture((JGPU::WGPUTextureDescriptor* )descriptor_addr, (JGPU::WGPUTexture* )valueOut_addr);
*/
    public static native void internal_native_CreateTexture(long this_addr, long descriptor_addr, long valueOut_addr);

    public void destroy() {
        internal_native_Destroy(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->Destroy();
*/
    public static native void internal_native_Destroy(long this_addr);

    public void getFeatures(WGPUSupportedFeatures features) {
        internal_native_GetFeatures(native_address, features.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->GetFeatures((JGPU::WGPUSupportedFeatures* )features_addr);
*/
    public static native void internal_native_GetFeatures(long this_addr, long features_addr);

    public boolean hasFeature(WGPUFeatureName feature) {
        return internal_native_HasFeature(native_address, feature.getValue());
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
return nativeObject->HasFeature((::WGPUFeatureName)feature);
*/
    public static native boolean internal_native_HasFeature(long this_addr, int feature);

    public void getLimits(WGPULimits limits) {
        internal_native_GetLimits(native_address, limits.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
nativeObject->GetLimits((JGPU::WGPULimits* )limits_addr);
*/
    public static native void internal_native_GetLimits(long this_addr, long limits_addr);

    public WGPUQueue getQueue() {
        long pointer = internal_native_GetQueue(native_address);
        if (pointer == 0)
            return WGPUQueue.NULL;
        if (WGPUQueue_TEMP_GEN_0 == null)
            WGPUQueue_TEMP_GEN_0 = WGPUQueue.native_new();
        WGPUQueue_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUQueue_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDevice* nativeObject = (JGPU::WGPUDevice*)this_addr;
JGPU::WGPUQueue* obj = nativeObject->GetQueue();
return (jlong)obj;
*/
    public static native long internal_native_GetQueue(long this_addr);
}
