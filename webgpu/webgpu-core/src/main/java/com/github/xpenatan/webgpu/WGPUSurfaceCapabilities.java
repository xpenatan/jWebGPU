/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUSurfaceCapabilities extends IDLBase {

    static private WGPUSurfaceCapabilities WGPUSurfaceCapabilities_TEMP_STATIC_GEN_0;

    private WGPUVectorTextureFormat WGPUVectorTextureFormat_TEMP_GEN_0;

    static public final WGPUSurfaceCapabilities NULL = WGPUSurfaceCapabilities.native_new();

    static public final WGPUSurfaceCapabilities T_01 = WGPUSurfaceCapabilities.native_new();

    static public final WGPUSurfaceCapabilities T_02 = WGPUSurfaceCapabilities.native_new();

    static public final WGPUSurfaceCapabilities T_03 = WGPUSurfaceCapabilities.native_new();

    public WGPUSurfaceCapabilities() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPUSurfaceCapabilities();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUSurfaceCapabilities(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUSurfaceCapabilities native_new() {
        return new WGPUSurfaceCapabilities((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUSurfaceCapabilities* nativeObject = (JGPU::WGPUSurfaceCapabilities*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public static WGPUSurfaceCapabilities obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return WGPUSurfaceCapabilities.NULL;
        if (WGPUSurfaceCapabilities_TEMP_STATIC_GEN_0 == null)
            WGPUSurfaceCapabilities_TEMP_STATIC_GEN_0 = WGPUSurfaceCapabilities.native_new();
        WGPUSurfaceCapabilities_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPUSurfaceCapabilities_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)JGPU::WGPUSurfaceCapabilities::Obtain();
*/
    public static native long internal_native_Obtain();

    public WGPUVectorTextureFormat getFormats() {
        long pointer = internal_native_GetFormats(native_address);
        if (pointer == 0)
            return WGPUVectorTextureFormat.NULL;
        if (WGPUVectorTextureFormat_TEMP_GEN_0 == null)
            WGPUVectorTextureFormat_TEMP_GEN_0 = WGPUVectorTextureFormat.native_new();
        WGPUVectorTextureFormat_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUVectorTextureFormat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUSurfaceCapabilities* nativeObject = (JGPU::WGPUSurfaceCapabilities*)this_addr;
static JGPU::WGPUVectorTextureFormat copy_addr;
copy_addr = nativeObject->GetFormats();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetFormats(long this_addr);
}
