/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPURequestAdapterOptions extends IDLBase {

    static private WGPURequestAdapterOptions WGPURequestAdapterOptions_TEMP_STATIC_GEN_0;

    static public final WGPURequestAdapterOptions NULL = WGPURequestAdapterOptions.native_new();

    static public final WGPURequestAdapterOptions T_01 = WGPURequestAdapterOptions.native_new();

    static public final WGPURequestAdapterOptions T_02 = WGPURequestAdapterOptions.native_new();

    static public final WGPURequestAdapterOptions T_03 = WGPURequestAdapterOptions.native_new();

    public WGPURequestAdapterOptions() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPURequestAdapterOptions();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPURequestAdapterOptions(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPURequestAdapterOptions native_new() {
        return new WGPURequestAdapterOptions((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURequestAdapterOptions* nativeObject = (JGPU::WGPURequestAdapterOptions*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public static WGPURequestAdapterOptions obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return WGPURequestAdapterOptions.NULL;
        if (WGPURequestAdapterOptions_TEMP_STATIC_GEN_0 == null)
            WGPURequestAdapterOptions_TEMP_STATIC_GEN_0 = WGPURequestAdapterOptions.native_new();
        WGPURequestAdapterOptions_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPURequestAdapterOptions_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)JGPU::WGPURequestAdapterOptions::Obtain();
*/
    public static native long internal_native_Obtain();

    public void setNextInChain(WGPUChainedStruct chainedStruct) {
        internal_native_SetNextInChain(native_address, chainedStruct.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURequestAdapterOptions* nativeObject = (JGPU::WGPURequestAdapterOptions*)this_addr;
nativeObject->SetNextInChain((JGPU::WGPUChainedStruct* )chainedStruct_addr);
*/
    public static native void internal_native_SetNextInChain(long this_addr, long chainedStruct_addr);

    public void setFeatureLevel(WGPUFeatureLevel featureLevel) {
        internal_native_SetFeatureLevel(native_address, featureLevel.getValue());
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURequestAdapterOptions* nativeObject = (JGPU::WGPURequestAdapterOptions*)this_addr;
nativeObject->SetFeatureLevel((::WGPUFeatureLevel)featureLevel);
*/
    public static native void internal_native_SetFeatureLevel(long this_addr, long featureLevel);

    public void setPowerPreference(WGPUPowerPreference powerPreference) {
        internal_native_SetPowerPreference(native_address, powerPreference.getValue());
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURequestAdapterOptions* nativeObject = (JGPU::WGPURequestAdapterOptions*)this_addr;
nativeObject->SetPowerPreference((::WGPUPowerPreference)powerPreference);
*/
    public static native void internal_native_SetPowerPreference(long this_addr, long powerPreference);

    public void setBackendType(WGPUBackendType backendType) {
        internal_native_SetBackendType(native_address, backendType.getValue());
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURequestAdapterOptions* nativeObject = (JGPU::WGPURequestAdapterOptions*)this_addr;
nativeObject->SetBackendType((::WGPUBackendType)backendType);
*/
    public static native void internal_native_SetBackendType(long this_addr, long backendType);

    public void setCompatibleSurface(WGPUSurface compatibleSurface) {
        internal_native_SetCompatibleSurface(native_address, compatibleSurface.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURequestAdapterOptions* nativeObject = (JGPU::WGPURequestAdapterOptions*)this_addr;
nativeObject->SetCompatibleSurface((JGPU::WGPUSurface* )compatibleSurface_addr);
*/
    public static native void internal_native_SetCompatibleSurface(long this_addr, long compatibleSurface_addr);
}
