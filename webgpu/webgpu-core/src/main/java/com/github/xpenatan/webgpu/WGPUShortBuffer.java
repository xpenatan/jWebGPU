/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUShortBuffer extends IDLBase {

    private WGPUByteBuffer WGPUByteBuffer_TEMP_GEN_0;

    static public final WGPUShortBuffer NULL = WGPUShortBuffer.native_new();

    static public final WGPUShortBuffer T_01 = WGPUShortBuffer.native_new();

    static public final WGPUShortBuffer T_02 = WGPUShortBuffer.native_new();

    static public final WGPUShortBuffer T_03 = WGPUShortBuffer.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUShortBuffer(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUShortBuffer native_new() {
        return new WGPUShortBuffer((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public WGPUByteBuffer getByteBuffer() {
        long pointer = internal_native_getByteBuffer(native_address);
        if (pointer == 0)
            return WGPUByteBuffer.NULL;
        if (WGPUByteBuffer_TEMP_GEN_0 == null)
            WGPUByteBuffer_TEMP_GEN_0 = WGPUByteBuffer.native_new();
        WGPUByteBuffer_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUByteBuffer_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
return (jlong)&nativeObject->getByteBuffer();
*/
    public static native long internal_native_getByteBuffer(long this_addr);

    public void put(short value) {
        internal_native_put__0(native_address, value);
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
nativeObject->put(value);
*/
    public static native void internal_native_put__0(long this_addr, short value);

    public void put(int index, short value) {
        internal_native_put__1(native_address, index, value);
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
nativeObject->put((int)index, value);
*/
    public static native void internal_native_put__1(long this_addr, int index, short value);

    public short get(int index) {
        return internal_native_get(native_address, index);
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
return nativeObject->get((int)index);
*/
    public static native short internal_native_get(long this_addr, int index);

    public short get() {
        return internal_native_get(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
return nativeObject->get();
*/
    public static native short internal_native_get(long this_addr);

    public int remaining() {
        return internal_native_remaining(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
return nativeObject->remaining();
*/
    public static native int internal_native_remaining(long this_addr);

    public int getCapacity() {
        return internal_native_getCapacity(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
return nativeObject->getCapacity();
*/
    public static native int internal_native_getCapacity(long this_addr);

    public void clear() {
        internal_native_clear(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
nativeObject->clear();
*/
    public static native void internal_native_clear(long this_addr);

    public void limit(int newLimit) {
        internal_native_limit(native_address, newLimit);
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
nativeObject->limit((int)newLimit);
*/
    public static native void internal_native_limit(long this_addr, int newLimit);

    public int getLimit() {
        return internal_native_getLimit(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
return nativeObject->getLimit();
*/
    public static native int internal_native_getLimit(long this_addr);

    public void position(int newPosition) {
        internal_native_position(native_address, newPosition);
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
nativeObject->position((int)newPosition);
*/
    public static native void internal_native_position(long this_addr, int newPosition);

    public int getPosition() {
        return internal_native_getPosition(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
return nativeObject->getPosition();
*/
    public static native int internal_native_getPosition(long this_addr);

    public void flip() {
        internal_native_flip(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUShortBuffer* nativeObject = (WGPUShortBuffer*)this_addr;
nativeObject->flip();
*/
    public static native void internal_native_flip(long this_addr);
}
