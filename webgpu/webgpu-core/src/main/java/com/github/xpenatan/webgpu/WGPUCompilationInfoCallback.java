/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.jParser.idl.IDLBase;

public class WGPUCompilationInfoCallback extends IDLBase {

    static private WGPUCompilationInfo WGPUCompilationInfo_TEMP_STATIC_GEN_0;

    static public final WGPUCompilationInfoCallback NULL = WGPUCompilationInfoCallback.native_new();

    /*[-JNI;-NATIVE]
class WGPUCompilationInfoCallbackImpl : public JGPU::WGPUCompilationInfoCallback {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID OnCallbackIJ_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(WGPUCompilationInfoCallbackImpl::jClassID == 0) {
		WGPUCompilationInfoCallbackImpl::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		WGPUCompilationInfoCallbackImpl::OnCallbackIJ_ID = env->GetMethodID(jClassID, "internal_onCallback", "(IJ)V");
	}
}
virtual void OnCallback(WGPUCompilationInfoRequestStatus status, JGPU::WGPUCompilationInfo* compilationInfo) {
   env->CallVoidMethod(obj, WGPUCompilationInfoCallbackImpl::OnCallbackIJ_ID, status, (jlong)compilationInfo);
}
};
*/
    @Deprecated()
    protected WGPUCompilationInfoCallback(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUCompilationInfoCallback native_new() {
        return new WGPUCompilationInfoCallback((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUCompilationInfoCallbackImpl* nativeObject = (WGPUCompilationInfoCallbackImpl*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public WGPUCompilationInfoCallback() {
        long addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(native_address);
    }

    protected void onCallback(WGPUCompilationInfoRequestStatus status, WGPUCompilationInfo compilationInfo) {
    }

    private void internal_onCallback(int status_addr, long compilationInfo_addr) {
        WGPUCompilationInfoRequestStatus status_addr_enum = WGPUCompilationInfoRequestStatus.CUSTOM.setValue(status_addr);
        WGPUCompilationInfoRequestStatus[] status_addr_enum_values = WGPUCompilationInfoRequestStatus.values();
        for (int i = 0; i < status_addr_enum_values.length; i++) {
            WGPUCompilationInfoRequestStatus enumVal = status_addr_enum_values[i];
            if (enumVal != WGPUCompilationInfoRequestStatus.CUSTOM && enumVal.getValue() == status_addr) {
                status_addr_enum = status_addr_enum_values[i];
                break;
            }
        }
        if (WGPUCompilationInfo_TEMP_STATIC_GEN_0 == null)
            WGPUCompilationInfo_TEMP_STATIC_GEN_0 = WGPUCompilationInfo.native_new();
        WGPUCompilationInfo_TEMP_STATIC_GEN_0.internal_reset(compilationInfo_addr, false);
        onCallback(status_addr_enum, WGPUCompilationInfo_TEMP_STATIC_GEN_0);
    }

    /*[-JNI;-NATIVE]
return (jlong)new WGPUCompilationInfoCallbackImpl();
*/
    public static native long internal_native_create();

    /*[-JNI;-NATIVE]
WGPUCompilationInfoCallbackImpl* nativeObject = (WGPUCompilationInfoCallbackImpl*)this_addr;
nativeObject->setupCallback(env, object);
*/
    public native void internal_native_setupCallback(long this_addr);
}
