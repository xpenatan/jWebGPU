/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.jParser.idl.IDLBase;
import com.github.xpenatan.webgpu.idl.helper.IDLString;

public class WGPUAdapterInfo extends IDLBase {

    private IDLString IDLString_TEMP_GEN_0;

    private IDLString IDLString_TEMP_GEN_1;

    private IDLString IDLString_TEMP_GEN_2;

    private IDLString IDLString_TEMP_GEN_3;

    static private WGPUAdapterInfo WGPUAdapterInfo_TEMP_STATIC_GEN_0;

    static public final WGPUAdapterInfo NULL = WGPUAdapterInfo.native_new();

    public WGPUAdapterInfo() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPUAdapterInfo();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUAdapterInfo(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUAdapterInfo native_new() {
        return new WGPUAdapterInfo((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUAdapterInfo* nativeObject = (JGPU::WGPUAdapterInfo*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public IDLString getVendor() {
        long pointer = internal_native_GetVendor(native_address);
        if (pointer == 0)
            return IDLString.NULL;
        if (IDLString_TEMP_GEN_0 == null)
            IDLString_TEMP_GEN_0 = IDLString.native_new();
        IDLString_TEMP_GEN_0.internal_reset(pointer, false);
        return IDLString_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUAdapterInfo* nativeObject = (JGPU::WGPUAdapterInfo*)this_addr;
static IDLString copy_addr;
copy_addr = nativeObject->GetVendor();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetVendor(long this_addr);

    public int getVendorID() {
        return internal_native_GetVendorID(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUAdapterInfo* nativeObject = (JGPU::WGPUAdapterInfo*)this_addr;
return nativeObject->GetVendorID();
*/
    public static native int internal_native_GetVendorID(long this_addr);

    public IDLString getArchitecture() {
        long pointer = internal_native_GetArchitecture(native_address);
        if (pointer == 0)
            return IDLString.NULL;
        if (IDLString_TEMP_GEN_1 == null)
            IDLString_TEMP_GEN_1 = IDLString.native_new();
        IDLString_TEMP_GEN_1.internal_reset(pointer, false);
        return IDLString_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUAdapterInfo* nativeObject = (JGPU::WGPUAdapterInfo*)this_addr;
static IDLString copy_addr;
copy_addr = nativeObject->GetArchitecture();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetArchitecture(long this_addr);

    public IDLString getDevice() {
        long pointer = internal_native_GetDevice(native_address);
        if (pointer == 0)
            return IDLString.NULL;
        if (IDLString_TEMP_GEN_2 == null)
            IDLString_TEMP_GEN_2 = IDLString.native_new();
        IDLString_TEMP_GEN_2.internal_reset(pointer, false);
        return IDLString_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUAdapterInfo* nativeObject = (JGPU::WGPUAdapterInfo*)this_addr;
static IDLString copy_addr;
copy_addr = nativeObject->GetDevice();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetDevice(long this_addr);

    public int getDeviceID() {
        return internal_native_GetDeviceID(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUAdapterInfo* nativeObject = (JGPU::WGPUAdapterInfo*)this_addr;
return nativeObject->GetDeviceID();
*/
    public static native int internal_native_GetDeviceID(long this_addr);

    public IDLString getDescription() {
        long pointer = internal_native_GetDescription(native_address);
        if (pointer == 0)
            return IDLString.NULL;
        if (IDLString_TEMP_GEN_3 == null)
            IDLString_TEMP_GEN_3 = IDLString.native_new();
        IDLString_TEMP_GEN_3.internal_reset(pointer, false);
        return IDLString_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUAdapterInfo* nativeObject = (JGPU::WGPUAdapterInfo*)this_addr;
static IDLString copy_addr;
copy_addr = nativeObject->GetDescription();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetDescription(long this_addr);

    public WGPUBackendType getBackendType() {
        int value = internal_native_GetBackendType(native_address);
        WGPUBackendType[] values = WGPUBackendType.values();
        for (int i = 0; i < values.length; i++) {
            WGPUBackendType enumVal = values[i];
            if (enumVal != WGPUBackendType.CUSTOM && enumVal.getValue() == value)
                return enumVal;
        }
        return WGPUBackendType.CUSTOM.setValue(value);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUAdapterInfo* nativeObject = (JGPU::WGPUAdapterInfo*)this_addr;
return (int)nativeObject->GetBackendType();
*/
    public static native int internal_native_GetBackendType(long this_addr);

    public WGPUAdapterType getAdapterType() {
        int value = internal_native_GetAdapterType(native_address);
        WGPUAdapterType[] values = WGPUAdapterType.values();
        for (int i = 0; i < values.length; i++) {
            WGPUAdapterType enumVal = values[i];
            if (enumVal != WGPUAdapterType.CUSTOM && enumVal.getValue() == value)
                return enumVal;
        }
        return WGPUAdapterType.CUSTOM.setValue(value);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUAdapterInfo* nativeObject = (JGPU::WGPUAdapterInfo*)this_addr;
return (int)nativeObject->GetAdapterType();
*/
    public static native int internal_native_GetAdapterType(long this_addr);

    public static WGPUAdapterInfo obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return WGPUAdapterInfo.NULL;
        if (WGPUAdapterInfo_TEMP_STATIC_GEN_0 == null)
            WGPUAdapterInfo_TEMP_STATIC_GEN_0 = WGPUAdapterInfo.native_new();
        WGPUAdapterInfo_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPUAdapterInfo_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)JGPU::WGPUAdapterInfo::Obtain();
*/
    public static native long internal_native_Obtain();
}
