/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUComputePipeline extends IDLBase {

    private WGPUBindGroupLayout WGPUBindGroupLayout_TEMP_GEN_0;

    static public final WGPUComputePipeline NULL = WGPUComputePipeline.native_new();

    static public final WGPUComputePipeline T_01 = WGPUComputePipeline.native_new();

    static public final WGPUComputePipeline T_02 = WGPUComputePipeline.native_new();

    static public final WGPUComputePipeline T_03 = WGPUComputePipeline.native_new();

    public WGPUComputePipeline() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPUComputePipeline();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUComputePipeline(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUComputePipeline native_new() {
        return new WGPUComputePipeline((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePipeline* nativeObject = (JGPU::WGPUComputePipeline*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void setLabel(String value) {
        internal_native_SetLabel(native_address, value);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePipeline* nativeObject = (JGPU::WGPUComputePipeline*)this_addr;
nativeObject->SetLabel(value);
*/
    public static native void internal_native_SetLabel(long this_addr, String value);

    public void release() {
        internal_native_Release(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePipeline* nativeObject = (JGPU::WGPUComputePipeline*)this_addr;
nativeObject->Release();
*/
    public static native void internal_native_Release(long this_addr);

    public WGPUBindGroupLayout getBindGroupLayout(int groupIndex) {
        long pointer = internal_native_GetBindGroupLayout(native_address, groupIndex);
        if (pointer == 0)
            return null;
        if (WGPUBindGroupLayout_TEMP_GEN_0 == null)
            WGPUBindGroupLayout_TEMP_GEN_0 = WGPUBindGroupLayout.native_new();
        WGPUBindGroupLayout_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUBindGroupLayout_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePipeline* nativeObject = (JGPU::WGPUComputePipeline*)this_addr;
static JGPU::WGPUBindGroupLayout copy_addr;
copy_addr = nativeObject->GetBindGroupLayout((int)groupIndex);
return (jlong)&copy_addr;*/
    public static native long internal_native_GetBindGroupLayout(long this_addr, int groupIndex);

    public boolean isValid() {
        return internal_native_IsValid(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePipeline* nativeObject = (JGPU::WGPUComputePipeline*)this_addr;
return nativeObject->IsValid();
*/
    public static native boolean internal_native_IsValid(long this_addr);
}
