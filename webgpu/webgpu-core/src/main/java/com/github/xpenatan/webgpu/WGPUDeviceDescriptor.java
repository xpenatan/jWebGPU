/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUDeviceDescriptor extends IDLBase {

    static private WGPUDeviceDescriptor WGPUDeviceDescriptor_TEMP_STATIC_GEN_0;

    private WGPUQueueDescriptor WGPUQueueDescriptor_TEMP_GEN_0;

    static public final WGPUDeviceDescriptor NULL = WGPUDeviceDescriptor.native_new();

    static public final WGPUDeviceDescriptor T_01 = WGPUDeviceDescriptor.native_new();

    static public final WGPUDeviceDescriptor T_02 = WGPUDeviceDescriptor.native_new();

    static public final WGPUDeviceDescriptor T_03 = WGPUDeviceDescriptor.native_new();

    public WGPUDeviceDescriptor() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPUDeviceDescriptor();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUDeviceDescriptor(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUDeviceDescriptor native_new() {
        return new WGPUDeviceDescriptor((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDeviceDescriptor* nativeObject = (JGPU::WGPUDeviceDescriptor*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public static WGPUDeviceDescriptor obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return null;
        if (WGPUDeviceDescriptor_TEMP_STATIC_GEN_0 == null)
            WGPUDeviceDescriptor_TEMP_STATIC_GEN_0 = WGPUDeviceDescriptor.native_new();
        WGPUDeviceDescriptor_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPUDeviceDescriptor_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)JGPU::WGPUDeviceDescriptor::Obtain();
*/
    public static native long internal_native_Obtain();

    public void setNextInChain(WGPUChainedStruct chainedStruct) {
        internal_native_SetNextInChain(native_address, chainedStruct.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDeviceDescriptor* nativeObject = (JGPU::WGPUDeviceDescriptor*)this_addr;
nativeObject->SetNextInChain((JGPU::WGPUChainedStruct* )chainedStruct_addr);
*/
    public static native void internal_native_SetNextInChain(long this_addr, long chainedStruct_addr);

    public void setLabel(String label) {
        internal_native_SetLabel(native_address, label);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDeviceDescriptor* nativeObject = (JGPU::WGPUDeviceDescriptor*)this_addr;
nativeObject->SetLabel(label);
*/
    public static native void internal_native_SetLabel(long this_addr, String label);

    public void setRequiredLimits(WGPULimits limits) {
        internal_native_SetRequiredLimits(native_address, limits.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDeviceDescriptor* nativeObject = (JGPU::WGPUDeviceDescriptor*)this_addr;
nativeObject->SetRequiredLimits((JGPU::WGPULimits* )limits_addr);
*/
    public static native void internal_native_SetRequiredLimits(long this_addr, long limits_addr);

    public void setRequiredFeatures(WGPUVectorFeatureName features) {
        internal_native_SetRequiredFeatures(native_address, features.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDeviceDescriptor* nativeObject = (JGPU::WGPUDeviceDescriptor*)this_addr;
nativeObject->SetRequiredFeatures((JGPU::WGPUVectorFeatureName* )features_addr);
*/
    public static native void internal_native_SetRequiredFeatures(long this_addr, long features_addr);

    public WGPUQueueDescriptor getDefaultQueue() {
        long pointer = internal_native_GetDefaultQueue(native_address);
        if (pointer == 0)
            return null;
        if (WGPUQueueDescriptor_TEMP_GEN_0 == null)
            WGPUQueueDescriptor_TEMP_GEN_0 = WGPUQueueDescriptor.native_new();
        WGPUQueueDescriptor_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUQueueDescriptor_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUDeviceDescriptor* nativeObject = (JGPU::WGPUDeviceDescriptor*)this_addr;
static JGPU::WGPUQueueDescriptor copy_addr;
copy_addr = nativeObject->GetDefaultQueue();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetDefaultQueue(long this_addr);
}
