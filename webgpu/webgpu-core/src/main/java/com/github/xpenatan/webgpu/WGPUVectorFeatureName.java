/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUVectorFeatureName extends IDLBase {

    static private WGPUVectorFeatureName WGPUVectorFeatureName_TEMP_STATIC_GEN_0;

    static public final WGPUVectorFeatureName NULL = WGPUVectorFeatureName.native_new();

    static public final WGPUVectorFeatureName T_01 = WGPUVectorFeatureName.native_new();

    static public final WGPUVectorFeatureName T_02 = WGPUVectorFeatureName.native_new();

    static public final WGPUVectorFeatureName T_03 = WGPUVectorFeatureName.native_new();

    public WGPUVectorFeatureName() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPUVectorFeatureName();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUVectorFeatureName(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUVectorFeatureName native_new() {
        return new WGPUVectorFeatureName((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUVectorFeatureName* nativeObject = (JGPU::WGPUVectorFeatureName*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public int size() {
        return internal_native_size(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUVectorFeatureName* nativeObject = (JGPU::WGPUVectorFeatureName*)this_addr;
return nativeObject->size();
*/
    public static native int internal_native_size(long this_addr);

    public void clear() {
        internal_native_clear(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUVectorFeatureName* nativeObject = (JGPU::WGPUVectorFeatureName*)this_addr;
nativeObject->clear();
*/
    public static native void internal_native_clear(long this_addr);

    public void push_back(WGPUFeatureName featureName) {
        internal_native_push_back(native_address, featureName.getValue());
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUVectorFeatureName* nativeObject = (JGPU::WGPUVectorFeatureName*)this_addr;
nativeObject->push_back((::WGPUFeatureName)featureName);
*/
    public static native void internal_native_push_back(long this_addr, long featureName);

    public static WGPUVectorFeatureName obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return WGPUVectorFeatureName.NULL;
        if (WGPUVectorFeatureName_TEMP_STATIC_GEN_0 == null)
            WGPUVectorFeatureName_TEMP_STATIC_GEN_0 = WGPUVectorFeatureName.native_new();
        WGPUVectorFeatureName_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPUVectorFeatureName_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)JGPU::WGPUVectorFeatureName::Obtain();
*/
    public static native long internal_native_Obtain();
}
