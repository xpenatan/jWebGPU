/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUComputePipelineDescriptor extends IDLBase {

    private WGPUProgrammableStageDescriptor WGPUProgrammableStageDescriptor_TEMP_GEN_0;

    static private WGPUComputePipelineDescriptor WGPUComputePipelineDescriptor_TEMP_STATIC_GEN_0;

    static public final WGPUComputePipelineDescriptor NULL = WGPUComputePipelineDescriptor.native_new();

    public WGPUComputePipelineDescriptor() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPUComputePipelineDescriptor();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUComputePipelineDescriptor(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUComputePipelineDescriptor native_new() {
        return new WGPUComputePipelineDescriptor((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePipelineDescriptor* nativeObject = (JGPU::WGPUComputePipelineDescriptor*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void setLabel(String label) {
        internal_native_SetLabel(native_address, label);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePipelineDescriptor* nativeObject = (JGPU::WGPUComputePipelineDescriptor*)this_addr;
nativeObject->SetLabel(label);
*/
    public static native void internal_native_SetLabel(long this_addr, String label);

    public void setNextInChain(WGPUChainedStruct chainedStruct) {
        internal_native_SetNextInChain(native_address, chainedStruct.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePipelineDescriptor* nativeObject = (JGPU::WGPUComputePipelineDescriptor*)this_addr;
nativeObject->SetNextInChain((JGPU::WGPUChainedStruct* )chainedStruct_addr);
*/
    public static native void internal_native_SetNextInChain(long this_addr, long chainedStruct_addr);

    public void setLayout(WGPUPipelineLayout layout) {
        internal_native_SetLayout(native_address, layout.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePipelineDescriptor* nativeObject = (JGPU::WGPUComputePipelineDescriptor*)this_addr;
nativeObject->SetLayout((JGPU::WGPUPipelineLayout* )layout_addr);
*/
    public static native void internal_native_SetLayout(long this_addr, long layout_addr);

    public WGPUProgrammableStageDescriptor getCompute() {
        long pointer = internal_native_GetCompute(native_address);
        if (pointer == 0)
            return WGPUProgrammableStageDescriptor.NULL;
        if (WGPUProgrammableStageDescriptor_TEMP_GEN_0 == null)
            WGPUProgrammableStageDescriptor_TEMP_GEN_0 = WGPUProgrammableStageDescriptor.native_new();
        WGPUProgrammableStageDescriptor_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUProgrammableStageDescriptor_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePipelineDescriptor* nativeObject = (JGPU::WGPUComputePipelineDescriptor*)this_addr;
static JGPU::WGPUProgrammableStageDescriptor copy_addr;
copy_addr = nativeObject->GetCompute();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetCompute(long this_addr);

    public static WGPUComputePipelineDescriptor obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return WGPUComputePipelineDescriptor.NULL;
        if (WGPUComputePipelineDescriptor_TEMP_STATIC_GEN_0 == null)
            WGPUComputePipelineDescriptor_TEMP_STATIC_GEN_0 = WGPUComputePipelineDescriptor.native_new();
        WGPUComputePipelineDescriptor_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPUComputePipelineDescriptor_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)JGPU::WGPUComputePipelineDescriptor::Obtain();
*/
    public static native long internal_native_Obtain();
}
