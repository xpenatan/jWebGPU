/*
  -------------------------------------------------------
   This file was generated by JParser
 
   Do not make changes to this file
  -------------------------------------------------------
*/
package com.github.xpenatan.webgpu;

import java.nio.ByteBuffer;
import com.github.xpenatan.webgpu.idl.helper.IDLByteArray;
import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUQueue extends IDLBase {

    public final static WGPUQueue NULL = createInstance();

    public static WGPUQueue createInstance() {
        return new WGPUQueue((byte) 0, (char) 0);
    }

    private WGPUQueue(byte v, char c) {
    }

    public void writeBuffer(WGPUBuffer buffer, int bufferOffset, ByteBuffer byteBuffer, int dataSize) {
        internal_native_WriteBuffer(native_address, (buffer != null ? buffer.native_address : 0), bufferOffset, byteBuffer, dataSize);
    }

    /*
      [-JNI;-NATIVE]
              JGPU::WGPUQueue* nativeObject = (JGPU::WGPUQueue*)this_addr;
              void* bufferAddress = env->GetDirectBufferAddress(byteBuffer);
              nativeObject->WriteBuffer((JGPU::WGPUBuffer* )buffer_addr, (int)bufferOffset, bufferAddress, (int)dataSize);
    */
    private static native void internal_native_WriteBuffer(long this_addr, long buffer_addr, int bufferOffset, ByteBuffer byteBuffer, int dataSize);

    public void writeTexture(WGPUTexelCopyTextureInfo destination, ByteBuffer byteBuffer, int dataSize, WGPUTexelCopyBufferLayout dataLayout, WGPUExtent3D writeSize) {
        internal_native_WriteTexture(native_address, (destination != null ? destination.native_address : 0), byteBuffer, dataSize, dataLayout.native_address, writeSize.native_address);
    }

    /*
      [-JNI;-NATIVE]
              JGPU::WGPUQueue* nativeObject = (JGPU::WGPUQueue*)this_addr;
              void* bufferAddress = env->GetDirectBufferAddress(byteBuffer);
              nativeObject->WriteTexture((JGPU::WGPUTexelCopyTextureInfo* )destination_addr, bufferAddress, (int)dataSize, (JGPU::WGPUTexelCopyBufferLayout* )dataLayout_addr, (JGPU::WGPUExtent3D* )writeSize_addr);
    */
    private static native void internal_native_WriteTexture(long this_addr, long destination_addr, ByteBuffer byteBuffer, int dataSize, long dataLayout_addr, long writeSize_addr);

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUQueue* nativeObject = (JGPU::WGPUQueue*)this_addr;
      delete nativeObject;
    */
    public static native void internal_native_deleteNative(long this_addr);

    public void setLabel(String value) {
        internal_native_SetLabel(native_address, value);
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUQueue* nativeObject = (JGPU::WGPUQueue*)this_addr;
      nativeObject->SetLabel(value);
    */
    public static native void internal_native_SetLabel(long this_addr, String value);

    public void submit(WGPUVectorCommandBuffer commandVector) {
        internal_native_Submit(native_address, commandVector.native_address);
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUQueue* nativeObject = (JGPU::WGPUQueue*)this_addr;
      nativeObject->Submit((WGPUVectorCommandBuffer* )commandVector_addr);
    */
    public static native void internal_native_Submit(long this_addr, long commandVector_addr);

    public void release() {
        internal_native_Release(native_address);
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUQueue* nativeObject = (JGPU::WGPUQueue*)this_addr;
      nativeObject->Release();
    */
    public static native void internal_native_Release(long this_addr);
}
