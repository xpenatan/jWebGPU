/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPURenderPipelineDescriptor extends IDLBase {

    static private WGPURenderPipelineDescriptor WGPURenderPipelineDescriptor_TEMP_STATIC_GEN_0;

    private WGPUVertexState WGPUVertexState_TEMP_GEN_0;

    private WGPUPrimitiveState WGPUPrimitiveState_TEMP_GEN_0;

    private WGPUMultisampleState WGPUMultisampleState_TEMP_GEN_0;

    static public final WGPURenderPipelineDescriptor NULL = WGPURenderPipelineDescriptor.native_new();

    static public final WGPURenderPipelineDescriptor T_01 = WGPURenderPipelineDescriptor.native_new();

    static public final WGPURenderPipelineDescriptor T_02 = WGPURenderPipelineDescriptor.native_new();

    static public final WGPURenderPipelineDescriptor T_03 = WGPURenderPipelineDescriptor.native_new();

    public WGPURenderPipelineDescriptor() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPURenderPipelineDescriptor();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPURenderPipelineDescriptor(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPURenderPipelineDescriptor native_new() {
        return new WGPURenderPipelineDescriptor((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPipelineDescriptor* nativeObject = (JGPU::WGPURenderPipelineDescriptor*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public static WGPURenderPipelineDescriptor obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return WGPURenderPipelineDescriptor.NULL;
        if (WGPURenderPipelineDescriptor_TEMP_STATIC_GEN_0 == null)
            WGPURenderPipelineDescriptor_TEMP_STATIC_GEN_0 = WGPURenderPipelineDescriptor.native_new();
        WGPURenderPipelineDescriptor_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPURenderPipelineDescriptor_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)JGPU::WGPURenderPipelineDescriptor::Obtain();
*/
    public static native long internal_native_Obtain();

    public void setLabel(String value) {
        internal_native_SetLabel(native_address, value);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPipelineDescriptor* nativeObject = (JGPU::WGPURenderPipelineDescriptor*)this_addr;
nativeObject->SetLabel(value);
*/
    public static native void internal_native_SetLabel(long this_addr, String value);

    public void setNextInChain(WGPUChainedStruct chainedStruct) {
        internal_native_SetNextInChain(native_address, chainedStruct.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPipelineDescriptor* nativeObject = (JGPU::WGPURenderPipelineDescriptor*)this_addr;
nativeObject->SetNextInChain((JGPU::WGPUChainedStruct* )chainedStruct_addr);
*/
    public static native void internal_native_SetNextInChain(long this_addr, long chainedStruct_addr);

    public WGPUVertexState getVertex() {
        long pointer = internal_native_GetVertex(native_address);
        if (pointer == 0)
            return WGPUVertexState.NULL;
        if (WGPUVertexState_TEMP_GEN_0 == null)
            WGPUVertexState_TEMP_GEN_0 = WGPUVertexState.native_new();
        WGPUVertexState_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUVertexState_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPipelineDescriptor* nativeObject = (JGPU::WGPURenderPipelineDescriptor*)this_addr;
static JGPU::WGPUVertexState copy_addr;
copy_addr = nativeObject->GetVertex();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetVertex(long this_addr);

    public WGPUPrimitiveState getPrimitive() {
        long pointer = internal_native_GetPrimitive(native_address);
        if (pointer == 0)
            return WGPUPrimitiveState.NULL;
        if (WGPUPrimitiveState_TEMP_GEN_0 == null)
            WGPUPrimitiveState_TEMP_GEN_0 = WGPUPrimitiveState.native_new();
        WGPUPrimitiveState_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUPrimitiveState_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPipelineDescriptor* nativeObject = (JGPU::WGPURenderPipelineDescriptor*)this_addr;
static JGPU::WGPUPrimitiveState copy_addr;
copy_addr = nativeObject->GetPrimitive();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetPrimitive(long this_addr);

    public void setFragment(WGPUFragmentState fragmentState) {
        internal_native_SetFragment(native_address, fragmentState.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPipelineDescriptor* nativeObject = (JGPU::WGPURenderPipelineDescriptor*)this_addr;
nativeObject->SetFragment((JGPU::WGPUFragmentState* )fragmentState_addr);
*/
    public static native void internal_native_SetFragment(long this_addr, long fragmentState_addr);

    public void setDepthStencil(WGPUDepthStencilState depthStencilState) {
        internal_native_SetDepthStencil(native_address, depthStencilState.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPipelineDescriptor* nativeObject = (JGPU::WGPURenderPipelineDescriptor*)this_addr;
nativeObject->SetDepthStencil((JGPU::WGPUDepthStencilState* )depthStencilState_addr);
*/
    public static native void internal_native_SetDepthStencil(long this_addr, long depthStencilState_addr);

    public WGPUMultisampleState getMultisample() {
        long pointer = internal_native_GetMultisample(native_address);
        if (pointer == 0)
            return WGPUMultisampleState.NULL;
        if (WGPUMultisampleState_TEMP_GEN_0 == null)
            WGPUMultisampleState_TEMP_GEN_0 = WGPUMultisampleState.native_new();
        WGPUMultisampleState_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUMultisampleState_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPipelineDescriptor* nativeObject = (JGPU::WGPURenderPipelineDescriptor*)this_addr;
static JGPU::WGPUMultisampleState copy_addr;
copy_addr = nativeObject->GetMultisample();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetMultisample(long this_addr);

    public void setLayout(WGPUPipelineLayout pipelineLayout) {
        internal_native_SetLayout(native_address, pipelineLayout.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPipelineDescriptor* nativeObject = (JGPU::WGPURenderPipelineDescriptor*)this_addr;
nativeObject->SetLayout((JGPU::WGPUPipelineLayout* )pipelineLayout_addr);
*/
    public static native void internal_native_SetLayout(long this_addr, long pipelineLayout_addr);
}
