/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUComputePassEncoder extends IDLBase {

    static private WGPUComputePassEncoder WGPUComputePassEncoder_TEMP_STATIC_GEN_0;

    static public final WGPUComputePassEncoder NULL = WGPUComputePassEncoder.native_new();

    static public final WGPUComputePassEncoder T_01 = WGPUComputePassEncoder.native_new();

    static public final WGPUComputePassEncoder T_02 = WGPUComputePassEncoder.native_new();

    static public final WGPUComputePassEncoder T_03 = WGPUComputePassEncoder.native_new();

    public WGPUComputePassEncoder() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPUComputePassEncoder();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUComputePassEncoder(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUComputePassEncoder native_new() {
        return new WGPUComputePassEncoder((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePassEncoder* nativeObject = (JGPU::WGPUComputePassEncoder*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void setLabel(String label) {
        internal_native_SetLabel(native_address, label);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePassEncoder* nativeObject = (JGPU::WGPUComputePassEncoder*)this_addr;
nativeObject->SetLabel(label);
*/
    public static native void internal_native_SetLabel(long this_addr, String label);

    public void release() {
        internal_native_Release(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePassEncoder* nativeObject = (JGPU::WGPUComputePassEncoder*)this_addr;
nativeObject->Release();
*/
    public static native void internal_native_Release(long this_addr);

    public void setDispatchWorkgroups(int workgroupCountX, int workgroupCountY, int workgroupCountZ) {
        internal_native_SetDispatchWorkgroups(native_address, workgroupCountX, workgroupCountY, workgroupCountZ);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePassEncoder* nativeObject = (JGPU::WGPUComputePassEncoder*)this_addr;
nativeObject->SetDispatchWorkgroups((int)workgroupCountX, (int)workgroupCountY, (int)workgroupCountZ);
*/
    public static native void internal_native_SetDispatchWorkgroups(long this_addr, int workgroupCountX, int workgroupCountY, int workgroupCountZ);

    public void dispatchWorkgroupsIndirect(WGPUBuffer indirectBuffer, int indirectOffset) {
        internal_native_DispatchWorkgroupsIndirect(native_address, indirectBuffer.native_address, indirectOffset);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePassEncoder* nativeObject = (JGPU::WGPUComputePassEncoder*)this_addr;
nativeObject->DispatchWorkgroupsIndirect((JGPU::WGPUBuffer* )indirectBuffer_addr, (int)indirectOffset);
*/
    public static native void internal_native_DispatchWorkgroupsIndirect(long this_addr, long indirectBuffer_addr, int indirectOffset);

    public void end() {
        internal_native_End(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePassEncoder* nativeObject = (JGPU::WGPUComputePassEncoder*)this_addr;
nativeObject->End();
*/
    public static native void internal_native_End(long this_addr);

    public void insertDebugMarker(String value) {
        internal_native_InsertDebugMarker(native_address, value);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePassEncoder* nativeObject = (JGPU::WGPUComputePassEncoder*)this_addr;
nativeObject->InsertDebugMarker(value);
*/
    public static native void internal_native_InsertDebugMarker(long this_addr, String value);

    public void popDebugGroup() {
        internal_native_PopDebugGroup(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePassEncoder* nativeObject = (JGPU::WGPUComputePassEncoder*)this_addr;
nativeObject->PopDebugGroup();
*/
    public static native void internal_native_PopDebugGroup(long this_addr);

    public void pushDebugGroup(String groupLabel) {
        internal_native_PushDebugGroup(native_address, groupLabel);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePassEncoder* nativeObject = (JGPU::WGPUComputePassEncoder*)this_addr;
nativeObject->PushDebugGroup(groupLabel);
*/
    public static native void internal_native_PushDebugGroup(long this_addr, String groupLabel);

    public void setBindGroup(int groupIndex, WGPUBindGroup group, WGPUVectorInt offsets) {
        internal_native_SetBindGroup(native_address, groupIndex, group.native_address, offsets.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePassEncoder* nativeObject = (JGPU::WGPUComputePassEncoder*)this_addr;
nativeObject->SetBindGroup((int)groupIndex, (JGPU::WGPUBindGroup* )group_addr, (JGPU::WGPUVectorInt* )offsets_addr);
*/
    public static native void internal_native_SetBindGroup(long this_addr, int groupIndex, long group_addr, long offsets_addr);

    public void setBindGroup(int groupIndex, WGPUBindGroup group) {
        internal_native_SetBindGroup(native_address, groupIndex, group.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePassEncoder* nativeObject = (JGPU::WGPUComputePassEncoder*)this_addr;
nativeObject->SetBindGroup((int)groupIndex, (JGPU::WGPUBindGroup* )group_addr);
*/
    public static native void internal_native_SetBindGroup(long this_addr, int groupIndex, long group_addr);

    public void setPipeline(WGPUComputePipeline pipeline) {
        internal_native_SetPipeline(native_address, pipeline.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePassEncoder* nativeObject = (JGPU::WGPUComputePassEncoder*)this_addr;
nativeObject->SetPipeline((JGPU::WGPUComputePipeline* )pipeline_addr);
*/
    public static native void internal_native_SetPipeline(long this_addr, long pipeline_addr);

    public boolean isValid() {
        return internal_native_IsValid(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUComputePassEncoder* nativeObject = (JGPU::WGPUComputePassEncoder*)this_addr;
return nativeObject->IsValid();
*/
    public static native boolean internal_native_IsValid(long this_addr);

    public static WGPUComputePassEncoder obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return WGPUComputePassEncoder.NULL;
        if (WGPUComputePassEncoder_TEMP_STATIC_GEN_0 == null)
            WGPUComputePassEncoder_TEMP_STATIC_GEN_0 = WGPUComputePassEncoder.native_new();
        WGPUComputePassEncoder_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPUComputePassEncoder_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)JGPU::WGPUComputePassEncoder::Obtain();
*/
    public static native long internal_native_Obtain();
}
