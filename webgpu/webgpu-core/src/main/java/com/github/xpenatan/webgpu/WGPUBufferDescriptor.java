/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUBufferDescriptor extends IDLBase {

    static private WGPUBufferDescriptor WGPUBufferDescriptor_TEMP_STATIC_GEN_0;

    static public final WGPUBufferDescriptor NULL = WGPUBufferDescriptor.native_new();

    static public final WGPUBufferDescriptor T_01 = WGPUBufferDescriptor.native_new();

    static public final WGPUBufferDescriptor T_02 = WGPUBufferDescriptor.native_new();

    static public final WGPUBufferDescriptor T_03 = WGPUBufferDescriptor.native_new();

    public WGPUBufferDescriptor() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPUBufferDescriptor();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUBufferDescriptor(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUBufferDescriptor native_new() {
        return new WGPUBufferDescriptor((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUBufferDescriptor* nativeObject = (JGPU::WGPUBufferDescriptor*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public static WGPUBufferDescriptor obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return null;
        if (WGPUBufferDescriptor_TEMP_STATIC_GEN_0 == null)
            WGPUBufferDescriptor_TEMP_STATIC_GEN_0 = WGPUBufferDescriptor.native_new();
        WGPUBufferDescriptor_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPUBufferDescriptor_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)JGPU::WGPUBufferDescriptor::Obtain();
*/
    public static native long internal_native_Obtain();

    public void setLabel(String label) {
        internal_native_SetLabel(native_address, label);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUBufferDescriptor* nativeObject = (JGPU::WGPUBufferDescriptor*)this_addr;
nativeObject->SetLabel(label);
*/
    public static native void internal_native_SetLabel(long this_addr, String label);

    public void setNextInChain(WGPUChainedStruct chainedStruct) {
        internal_native_SetNextInChain(native_address, chainedStruct.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUBufferDescriptor* nativeObject = (JGPU::WGPUBufferDescriptor*)this_addr;
nativeObject->SetNextInChain((JGPU::WGPUChainedStruct* )chainedStruct_addr);
*/
    public static native void internal_native_SetNextInChain(long this_addr, long chainedStruct_addr);

    public void setUsage(WGPUBufferUsage usage) {
        internal_native_SetUsage(native_address, usage.getValue());
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUBufferDescriptor* nativeObject = (JGPU::WGPUBufferDescriptor*)this_addr;
nativeObject->SetUsage((::WGPUBufferUsage)usage);
*/
    public static native void internal_native_SetUsage(long this_addr, long usage);

    public void setSize(int size) {
        internal_native_SetSize(native_address, size);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUBufferDescriptor* nativeObject = (JGPU::WGPUBufferDescriptor*)this_addr;
nativeObject->SetSize((int)size);
*/
    public static native void internal_native_SetSize(long this_addr, int size);

    public void setMappedAtCreation(boolean mappedAtCreation) {
        internal_native_SetMappedAtCreation(native_address, mappedAtCreation);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUBufferDescriptor* nativeObject = (JGPU::WGPUBufferDescriptor*)this_addr;
nativeObject->SetMappedAtCreation(mappedAtCreation);
*/
    public static native void internal_native_SetMappedAtCreation(long this_addr, boolean mappedAtCreation);
}
