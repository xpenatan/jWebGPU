/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUVectorCommandBuffer extends IDLBase {

    static private WGPUVectorCommandBuffer WGPUVectorCommandBuffer_TEMP_STATIC_GEN_0;

    static public final WGPUVectorCommandBuffer NULL = WGPUVectorCommandBuffer.createInstance();

    static public final WGPUVectorCommandBuffer T_01 = WGPUVectorCommandBuffer.createInstance();

    static public final WGPUVectorCommandBuffer T_02 = WGPUVectorCommandBuffer.createInstance();

    static public final WGPUVectorCommandBuffer T_03 = WGPUVectorCommandBuffer.createInstance();

    public WGPUVectorCommandBuffer() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new WGPUVectorCommandBuffer();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUVectorCommandBuffer(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUVectorCommandBuffer createInstance() {
        return new WGPUVectorCommandBuffer((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUVectorCommandBuffer* nativeObject = (WGPUVectorCommandBuffer*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public static WGPUVectorCommandBuffer obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return null;
        if (WGPUVectorCommandBuffer_TEMP_STATIC_GEN_0 == null)
            WGPUVectorCommandBuffer_TEMP_STATIC_GEN_0 = WGPUVectorCommandBuffer.createInstance();
        WGPUVectorCommandBuffer_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPUVectorCommandBuffer_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)WGPUVectorCommandBuffer::Obtain();
*/
    public static native long internal_native_Obtain();

    public int size() {
        return internal_native_size(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUVectorCommandBuffer* nativeObject = (WGPUVectorCommandBuffer*)this_addr;
return nativeObject->size();
*/
    public static native int internal_native_size(long this_addr);

    public void clear() {
        internal_native_clear(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUVectorCommandBuffer* nativeObject = (WGPUVectorCommandBuffer*)this_addr;
nativeObject->clear();
*/
    public static native void internal_native_clear(long this_addr);

    public void push_back(WGPUCommandBuffer entry) {
        internal_native_push_back(native_address, entry.native_address);
    }

    /*[-JNI;-NATIVE]
WGPUVectorCommandBuffer* nativeObject = (WGPUVectorCommandBuffer*)this_addr;
nativeObject->push_back(*((JGPU::WGPUCommandBuffer* )entry_addr));
*/
    public static native void internal_native_push_back(long this_addr, long entry_addr);
}
