/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUInstance extends IDLBase {

    static public final WGPUInstance NULL = WGPUInstance.native_new();

    static public final WGPUInstance T_01 = WGPUInstance.native_new();

    static public final WGPUInstance T_02 = WGPUInstance.native_new();

    static public final WGPUInstance T_03 = WGPUInstance.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUInstance(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUInstance native_new() {
        return new WGPUInstance((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUInstance* nativeObject = (JGPU::WGPUInstance*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public boolean isValid() {
        return internal_native_IsValid(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUInstance* nativeObject = (JGPU::WGPUInstance*)this_addr;
return nativeObject->IsValid();
*/
    public static native boolean internal_native_IsValid(long this_addr);

    public void release() {
        internal_native_Release(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUInstance* nativeObject = (JGPU::WGPUInstance*)this_addr;
nativeObject->Release();
*/
    public static native void internal_native_Release(long this_addr);

    public void requestAdapter(WGPURequestAdapterOptions options, WGPUCallbackMode mode, RequestAdapterCallback callback) {
        internal_native_RequestAdapter(native_address, options.native_address, mode.getValue(), callback.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUInstance* nativeObject = (JGPU::WGPUInstance*)this_addr;
nativeObject->RequestAdapter((JGPU::WGPURequestAdapterOptions* )options_addr, (::WGPUCallbackMode)mode, (RequestAdapterCallback* )callback_addr);
*/
    public static native void internal_native_RequestAdapter(long this_addr, long options_addr, long mode, long callback_addr);

    public WGPUSurface createWebSurface(String canvas) {
        long pointer = internal_native_CreateWebSurface(native_address, canvas);
        if (pointer == 0)
            return null;
        WGPUSurface WGPUSurface_NEW = WGPUSurface.native_new();
        WGPUSurface_NEW.internal_reset(pointer, true);
        return WGPUSurface_NEW;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUInstance* nativeObject = (JGPU::WGPUInstance*)this_addr;
JGPU::WGPUSurface* obj = nativeObject->CreateWebSurface(canvas);
return (jlong)obj;
*/
    public static native long internal_native_CreateWebSurface(long this_addr, String canvas);

    public WGPUSurface createWindowsSurface(IDLBase hwnd) {
        long pointer = internal_native_CreateWindowsSurface(native_address, hwnd.native_void_address);
        if (pointer == 0)
            return null;
        WGPUSurface WGPUSurface_NEW = WGPUSurface.native_new();
        WGPUSurface_NEW.internal_reset(pointer, true);
        return WGPUSurface_NEW;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUInstance* nativeObject = (JGPU::WGPUInstance*)this_addr;
JGPU::WGPUSurface* obj = nativeObject->CreateWindowsSurface((void** )hwnd_addr);
return (jlong)obj;
*/
    public static native long internal_native_CreateWindowsSurface(long this_addr, long hwnd_addr);

    public WGPUSurface createLinuxSurface(boolean isWayland, IDLBase windowOrSurface, IDLBase display) {
        long pointer = internal_native_CreateLinuxSurface(native_address, isWayland, windowOrSurface.native_void_address, display.native_void_address);
        if (pointer == 0)
            return null;
        WGPUSurface WGPUSurface_NEW = WGPUSurface.native_new();
        WGPUSurface_NEW.internal_reset(pointer, true);
        return WGPUSurface_NEW;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUInstance* nativeObject = (JGPU::WGPUInstance*)this_addr;
JGPU::WGPUSurface* obj = nativeObject->CreateLinuxSurface(isWayland, (void** )windowOrSurface_addr, (void** )display_addr);
return (jlong)obj;
*/
    public static native long internal_native_CreateLinuxSurface(long this_addr, boolean isWayland, long windowOrSurface_addr, long display_addr);

    public WGPUSurface createMacSurface(IDLBase metalLayer) {
        long pointer = internal_native_CreateMacSurface(native_address, metalLayer.native_void_address);
        if (pointer == 0)
            return null;
        WGPUSurface WGPUSurface_NEW = WGPUSurface.native_new();
        WGPUSurface_NEW.internal_reset(pointer, true);
        return WGPUSurface_NEW;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUInstance* nativeObject = (JGPU::WGPUInstance*)this_addr;
JGPU::WGPUSurface* obj = nativeObject->CreateMacSurface((void** )metalLayer_addr);
return (jlong)obj;
*/
    public static native long internal_native_CreateMacSurface(long this_addr, long metalLayer_addr);

    public WGPUSurface createAndroidSurface(WGPUAndroidWindow surface) {
        long pointer = internal_native_CreateAndroidSurface(native_address, surface.native_address);
        if (pointer == 0)
            return null;
        WGPUSurface WGPUSurface_NEW = WGPUSurface.native_new();
        WGPUSurface_NEW.internal_reset(pointer, true);
        return WGPUSurface_NEW;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUInstance* nativeObject = (JGPU::WGPUInstance*)this_addr;
JGPU::WGPUSurface* obj = nativeObject->CreateAndroidSurface((WGPUAndroidWindow* )surface_addr);
return (jlong)obj;
*/
    public static native long internal_native_CreateAndroidSurface(long this_addr, long surface_addr);

    public void processEvents() {
        internal_native_ProcessEvents(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUInstance* nativeObject = (JGPU::WGPUInstance*)this_addr;
nativeObject->ProcessEvents();
*/
    public static native void internal_native_ProcessEvents(long this_addr);

    public WGPUWaitStatus waitAny(WGPUVectorFutureWaitInfo futureVector, int timeoutNS) {
        int value = internal_native_WaitAny(native_address, futureVector.native_address, timeoutNS);
        return WGPUWaitStatus.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUInstance* nativeObject = (JGPU::WGPUInstance*)this_addr;
return (int)nativeObject->WaitAny((WGPUVectorFutureWaitInfo* )futureVector_addr, (int)timeoutNS);
*/
    public static native int internal_native_WaitAny(long this_addr, long futureVector_addr, int timeoutNS);
}
