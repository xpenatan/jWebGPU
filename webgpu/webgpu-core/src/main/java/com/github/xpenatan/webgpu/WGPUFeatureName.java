/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import java.util.Map;
import java.util.HashMap;
import com.github.xpenatan.webgpu.idl.IDLEnum;

public enum WGPUFeatureName implements IDLEnum<WGPUFeatureName> {

    CUSTOM(0),
    DepthClipControl(WGPUFeatureName_DepthClipControl_NATIVE()),
    Depth32FloatStencil8(WGPUFeatureName_Depth32FloatStencil8_NATIVE()),
    TimestampQuery(WGPUFeatureName_TimestampQuery_NATIVE()),
    TextureCompressionBC(WGPUFeatureName_TextureCompressionBC_NATIVE()),
    TextureCompressionBCSliced3D(WGPUFeatureName_TextureCompressionBCSliced3D_NATIVE()),
    TextureCompressionETC2(WGPUFeatureName_TextureCompressionETC2_NATIVE()),
    TextureCompressionASTC(WGPUFeatureName_TextureCompressionASTC_NATIVE()),
    TextureCompressionASTCSliced3D(WGPUFeatureName_TextureCompressionASTCSliced3D_NATIVE()),
    IndirectFirstInstance(WGPUFeatureName_IndirectFirstInstance_NATIVE()),
    ShaderF16(WGPUFeatureName_ShaderF16_NATIVE()),
    RG11B10UfloatRenderable(WGPUFeatureName_RG11B10UfloatRenderable_NATIVE()),
    BGRA8UnormStorage(WGPUFeatureName_BGRA8UnormStorage_NATIVE()),
    Float32Filterable(WGPUFeatureName_Float32Filterable_NATIVE()),
    Float32Blendable(WGPUFeatureName_Float32Blendable_NATIVE()),
    ClipDistances(WGPUFeatureName_ClipDistances_NATIVE()),
    DualSourceBlending(WGPUFeatureName_DualSourceBlending_NATIVE()),
    Force32(WGPUFeatureName_Force32_NATIVE());

    private int value;

    private WGPUFeatureName(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }

    public WGPUFeatureName setValue(int value) {
        if (this != CUSTOM) {
            throw new RuntimeException("Cannot change none CUSTOM value");
        }
        this.value = value;
        return this;
    }

    public WGPUFeatureName getCustom() {
        return CUSTOM;
    }

    public static final Map<Integer, WGPUFeatureName> MAP = new HashMap<>();

    static {
        for (WGPUFeatureName value : values()) {
            if (value != CUSTOM) {
                MAP.put(value.value, value);
            }
        }
    }

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_DepthClipControl;
*/
    private static native int WGPUFeatureName_DepthClipControl_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_Depth32FloatStencil8;
*/
    private static native int WGPUFeatureName_Depth32FloatStencil8_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_TimestampQuery;
*/
    private static native int WGPUFeatureName_TimestampQuery_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_TextureCompressionBC;
*/
    private static native int WGPUFeatureName_TextureCompressionBC_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_TextureCompressionBCSliced3D;
*/
    private static native int WGPUFeatureName_TextureCompressionBCSliced3D_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_TextureCompressionETC2;
*/
    private static native int WGPUFeatureName_TextureCompressionETC2_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_TextureCompressionASTC;
*/
    private static native int WGPUFeatureName_TextureCompressionASTC_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_TextureCompressionASTCSliced3D;
*/
    private static native int WGPUFeatureName_TextureCompressionASTCSliced3D_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_IndirectFirstInstance;
*/
    private static native int WGPUFeatureName_IndirectFirstInstance_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_ShaderF16;
*/
    private static native int WGPUFeatureName_ShaderF16_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_RG11B10UfloatRenderable;
*/
    private static native int WGPUFeatureName_RG11B10UfloatRenderable_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_BGRA8UnormStorage;
*/
    private static native int WGPUFeatureName_BGRA8UnormStorage_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_Float32Filterable;
*/
    private static native int WGPUFeatureName_Float32Filterable_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_Float32Blendable;
*/
    private static native int WGPUFeatureName_Float32Blendable_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_ClipDistances;
*/
    private static native int WGPUFeatureName_ClipDistances_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_DualSourceBlending;
*/
    private static native int WGPUFeatureName_DualSourceBlending_NATIVE();

    /*[-JNI;-NATIVE]
return (jlong)WGPUFeatureName_Force32;
*/
    private static native int WGPUFeatureName_Force32_NATIVE();
}
