/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.jParser.idl.IDLBase;

public class WGPURequestDeviceCallback extends IDLBase {

    static public final WGPURequestDeviceCallback NULL = WGPURequestDeviceCallback.native_new();

    /*[-JNI;-NATIVE]
class WGPURequestDeviceCallbackImpl : public JGPU::WGPURequestDeviceCallback {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID OnCallbackIJS_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(WGPURequestDeviceCallbackImpl::jClassID == 0) {
		WGPURequestDeviceCallbackImpl::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		WGPURequestDeviceCallbackImpl::OnCallbackIJS_ID = env->GetMethodID(jClassID, "internal_onCallback", "(IJLjava/lang/String;)V");
	}
}
virtual void OnCallback(WGPURequestDeviceStatus status, JGPU::WGPUDevice* device, const char* message) {
   env->CallVoidMethod(obj, WGPURequestDeviceCallbackImpl::OnCallbackIJS_ID, status, (jlong)device, env->NewStringUTF(message));
}
};
*/
    @Deprecated()
    protected WGPURequestDeviceCallback(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPURequestDeviceCallback native_new() {
        return new WGPURequestDeviceCallback((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
WGPURequestDeviceCallbackImpl* nativeObject = (WGPURequestDeviceCallbackImpl*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public WGPURequestDeviceCallback() {
        long addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(native_address);
    }

    protected void onCallback(WGPURequestDeviceStatus status, WGPUDevice device, String message) {
    }

    private void internal_onCallback(int status_addr, long device_addr, String message_addr) {
        WGPURequestDeviceStatus status_addr_enum = WGPURequestDeviceStatus.CUSTOM.setValue(status_addr);
        WGPURequestDeviceStatus[] status_addr_enum_values = WGPURequestDeviceStatus.values();
        for (int i = 0; i < status_addr_enum_values.length; i++) {
            WGPURequestDeviceStatus enumVal = status_addr_enum_values[i];
            if (enumVal != WGPURequestDeviceStatus.CUSTOM && enumVal.getValue() == status_addr) {
                status_addr_enum = status_addr_enum_values[i];
                break;
            }
        }
        WGPUDevice device_addr_new = WGPUDevice.native_new();
        device_addr_new.internal_reset(device_addr, true);
        onCallback(status_addr_enum, device_addr_new, message_addr);
    }

    /*[-JNI;-NATIVE]
return (jlong)new WGPURequestDeviceCallbackImpl();
*/
    public static native long internal_native_create();

    /*[-JNI;-NATIVE]
WGPURequestDeviceCallbackImpl* nativeObject = (WGPURequestDeviceCallbackImpl*)this_addr;
nativeObject->setupCallback(env, object);
*/
    public native void internal_native_setupCallback(long this_addr);
}
