/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPURenderBundleEncoder extends IDLBase {

    static public final WGPURenderBundleEncoder NULL = WGPURenderBundleEncoder.native_new();

    static public final WGPURenderBundleEncoder T_01 = WGPURenderBundleEncoder.native_new();

    static public final WGPURenderBundleEncoder T_02 = WGPURenderBundleEncoder.native_new();

    static public final WGPURenderBundleEncoder T_03 = WGPURenderBundleEncoder.native_new();

    public WGPURenderBundleEncoder() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPURenderBundleEncoder();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPURenderBundleEncoder(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPURenderBundleEncoder native_new() {
        return new WGPURenderBundleEncoder((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void release() {
        internal_native_Release(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->Release();
*/
    public static native void internal_native_Release(long this_addr);

    public void setPipeline(WGPURenderPipeline renderPipeline) {
        internal_native_SetPipeline(native_address, renderPipeline.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->SetPipeline((JGPU::WGPURenderPipeline* )renderPipeline_addr);
*/
    public static native void internal_native_SetPipeline(long this_addr, long renderPipeline_addr);

    public void setLabel(String label) {
        internal_native_SetLabel(native_address, label);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->SetLabel(label);
*/
    public static native void internal_native_SetLabel(long this_addr, String label);

    public void draw(int vertexCount, int instanceCount, int firstVertex, int firstInstance) {
        internal_native_Draw(native_address, vertexCount, instanceCount, firstVertex, firstInstance);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->Draw((int)vertexCount, (int)instanceCount, (int)firstVertex, (int)firstInstance);
*/
    public static native void internal_native_Draw(long this_addr, int vertexCount, int instanceCount, int firstVertex, int firstInstance);

    public void drawIndexed(int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance) {
        internal_native_DrawIndexed(native_address, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->DrawIndexed((int)indexCount, (int)instanceCount, (int)firstIndex, (int)baseVertex, (int)firstInstance);
*/
    public static native void internal_native_DrawIndexed(long this_addr, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance);

    public void drawIndirect(WGPUBuffer indirectBuffer, int indirectOffset) {
        internal_native_DrawIndirect(native_address, indirectBuffer.native_address, indirectOffset);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->DrawIndirect((JGPU::WGPUBuffer* )indirectBuffer_addr, (int)indirectOffset);
*/
    public static native void internal_native_DrawIndirect(long this_addr, long indirectBuffer_addr, int indirectOffset);

    public void drawIndexedIndirect(WGPUBuffer indirectBuffer, int indirectOffset) {
        internal_native_DrawIndexedIndirect(native_address, indirectBuffer.native_address, indirectOffset);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->DrawIndexedIndirect((JGPU::WGPUBuffer* )indirectBuffer_addr, (int)indirectOffset);
*/
    public static native void internal_native_DrawIndexedIndirect(long this_addr, long indirectBuffer_addr, int indirectOffset);

    public void setBindGroup(int groupIndex, WGPUBindGroup group, WGPUVectorInt dynamicOffsets) {
        internal_native_SetBindGroup(native_address, groupIndex, group.native_address, dynamicOffsets.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->SetBindGroup((int)groupIndex, (JGPU::WGPUBindGroup* )group_addr, (JGPU::WGPUVectorInt* )dynamicOffsets_addr);
*/
    public static native void internal_native_SetBindGroup(long this_addr, int groupIndex, long group_addr, long dynamicOffsets_addr);

    public void setBindGroup(int groupIndex, WGPUBindGroup group) {
        internal_native_SetBindGroup(native_address, groupIndex, group.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->SetBindGroup((int)groupIndex, (JGPU::WGPUBindGroup* )group_addr);
*/
    public static native void internal_native_SetBindGroup(long this_addr, int groupIndex, long group_addr);

    public void setVertexBuffer(int slot, WGPUBuffer buffer, int offset, int size) {
        internal_native_SetVertexBuffer(native_address, slot, buffer.native_address, offset, size);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->SetVertexBuffer((int)slot, (JGPU::WGPUBuffer* )buffer_addr, (int)offset, (int)size);
*/
    public static native void internal_native_SetVertexBuffer(long this_addr, int slot, long buffer_addr, int offset, int size);

    public void setIndexBuffer(WGPUBuffer buffer, WGPUIndexFormat format, int offset, int size) {
        internal_native_SetIndexBuffer(native_address, buffer.native_address, format.getValue(), offset, size);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->SetIndexBuffer((JGPU::WGPUBuffer* )buffer_addr, (::WGPUIndexFormat)format, (int)offset, (int)size);
*/
    public static native void internal_native_SetIndexBuffer(long this_addr, long buffer_addr, long format, int offset, int size);

    public void insertDebugMarker(String label) {
        internal_native_InsertDebugMarker(native_address, label);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->InsertDebugMarker(label);
*/
    public static native void internal_native_InsertDebugMarker(long this_addr, String label);

    public void popDebugGroup() {
        internal_native_PopDebugGroup(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->PopDebugGroup();
*/
    public static native void internal_native_PopDebugGroup(long this_addr);

    public void pushDebugGroup(String label) {
        internal_native_PushDebugGroup(native_address, label);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->PushDebugGroup(label);
*/
    public static native void internal_native_PushDebugGroup(long this_addr, String label);

    public void finish(WGPURenderBundleDescriptor descriptor, WGPURenderBundle bundleOut) {
        internal_native_Finish(native_address, descriptor.native_address, bundleOut.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
nativeObject->Finish((JGPU::WGPURenderBundleDescriptor* )descriptor_addr, (JGPU::WGPURenderBundle* )bundleOut_addr);
*/
    public static native void internal_native_Finish(long this_addr, long descriptor_addr, long bundleOut_addr);

    public boolean isValid() {
        return internal_native_IsValid(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleEncoder* nativeObject = (JGPU::WGPURenderBundleEncoder*)this_addr;
return nativeObject->IsValid();
*/
    public static native boolean internal_native_IsValid(long this_addr);
}
