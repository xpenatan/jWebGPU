/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPURenderBundleDescriptor extends IDLBase {

    static private WGPURenderBundleDescriptor WGPURenderBundleDescriptor_TEMP_STATIC_GEN_0;

    static public final WGPURenderBundleDescriptor NULL = WGPURenderBundleDescriptor.native_new();

    static public final WGPURenderBundleDescriptor T_01 = WGPURenderBundleDescriptor.native_new();

    static public final WGPURenderBundleDescriptor T_02 = WGPURenderBundleDescriptor.native_new();

    static public final WGPURenderBundleDescriptor T_03 = WGPURenderBundleDescriptor.native_new();

    public WGPURenderBundleDescriptor() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPURenderBundleDescriptor();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPURenderBundleDescriptor(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPURenderBundleDescriptor native_new() {
        return new WGPURenderBundleDescriptor((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleDescriptor* nativeObject = (JGPU::WGPURenderBundleDescriptor*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void setLabel(String label) {
        internal_native_SetLabel(native_address, label);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleDescriptor* nativeObject = (JGPU::WGPURenderBundleDescriptor*)this_addr;
nativeObject->SetLabel(label);
*/
    public static native void internal_native_SetLabel(long this_addr, String label);

    public void setNextInChain(WGPUChainedStruct chainedStruct) {
        internal_native_SetNextInChain(native_address, chainedStruct.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderBundleDescriptor* nativeObject = (JGPU::WGPURenderBundleDescriptor*)this_addr;
nativeObject->SetNextInChain((JGPU::WGPUChainedStruct* )chainedStruct_addr);
*/
    public static native void internal_native_SetNextInChain(long this_addr, long chainedStruct_addr);

    public static WGPURenderBundleDescriptor obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return WGPURenderBundleDescriptor.NULL;
        if (WGPURenderBundleDescriptor_TEMP_STATIC_GEN_0 == null)
            WGPURenderBundleDescriptor_TEMP_STATIC_GEN_0 = WGPURenderBundleDescriptor.native_new();
        WGPURenderBundleDescriptor_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPURenderBundleDescriptor_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)JGPU::WGPURenderBundleDescriptor::Obtain();
*/
    public static native long internal_native_Obtain();
}
