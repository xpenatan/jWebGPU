/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.jParser.idl.IDLBase;

public class WGPUBufferMapCallback extends IDLBase {

    static public final WGPUBufferMapCallback NULL = WGPUBufferMapCallback.native_new();

    /*[-JNI;-NATIVE]
class WGPUBufferMapCallbackImpl : public JGPU::WGPUBufferMapCallback {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID OnCallbackIS_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(WGPUBufferMapCallbackImpl::jClassID == 0) {
		WGPUBufferMapCallbackImpl::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		WGPUBufferMapCallbackImpl::OnCallbackIS_ID = env->GetMethodID(jClassID, "internal_onCallback", "(ILjava/lang/String;)V");
	}
}
virtual void OnCallback(WGPUMapAsyncStatus status, const char* message) {
   env->CallVoidMethod(obj, WGPUBufferMapCallbackImpl::OnCallbackIS_ID, status, env->NewStringUTF(message));
}
};
*/
    @Deprecated()
    protected WGPUBufferMapCallback(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUBufferMapCallback native_new() {
        return new WGPUBufferMapCallback((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUBufferMapCallbackImpl* nativeObject = (WGPUBufferMapCallbackImpl*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public WGPUBufferMapCallback() {
        long addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(native_address);
    }

    protected void onCallback(WGPUMapAsyncStatus status, String message) {
    }

    private void internal_onCallback(int status_addr, String message_addr) {
        WGPUMapAsyncStatus status_addr_enum = WGPUMapAsyncStatus.CUSTOM.setValue(status_addr);
        WGPUMapAsyncStatus[] status_addr_enum_values = WGPUMapAsyncStatus.values();
        for (int i = 0; i < status_addr_enum_values.length; i++) {
            WGPUMapAsyncStatus enumVal = status_addr_enum_values[i];
            if (enumVal != WGPUMapAsyncStatus.CUSTOM && enumVal.getValue() == status_addr) {
                status_addr_enum = status_addr_enum_values[i];
                break;
            }
        }
        onCallback(status_addr_enum, message_addr);
    }

    /*[-JNI;-NATIVE]
return (jlong)new WGPUBufferMapCallbackImpl();
*/
    public static native long internal_native_create();

    /*[-JNI;-NATIVE]
WGPUBufferMapCallbackImpl* nativeObject = (WGPUBufferMapCallbackImpl*)this_addr;
nativeObject->setupCallback(env, object);
*/
    public native void internal_native_setupCallback(long this_addr);
}
