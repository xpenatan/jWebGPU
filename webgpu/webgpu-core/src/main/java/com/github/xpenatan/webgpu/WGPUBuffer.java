/*
  -------------------------------------------------------
   This file was generated by JParser
 
   Do not make changes to this file
  -------------------------------------------------------
*/
package com.github.xpenatan.webgpu;

import java.nio.ByteBuffer;
import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUBuffer extends IDLBase {

    private WGPUFuture WGPUFuture_TEMP_GEN_0;

    private WGPUByteBuffer WGPUByteBuffer_TEMP_GEN_0;

    public final static WGPUBuffer NULL = native_new();

    public static WGPUBuffer native_new() {
        return new WGPUBuffer((byte) 0, (char) 0);
    }

    private WGPUBuffer(byte v, char c) {
    }

    public void getConstMappedRange(int offset, int size, ByteBuffer out) {
        internal_native_getConstMappedRange(native_address, offset, size, out);
    }

    /*
      [-JNI;-NATIVE]
              JGPU::WGPUBuffer* nativeObject = (JGPU::WGPUBuffer*)this_addr;
              void* bufferAddress = env->GetDirectBufferAddress(out);
              nativeObject->GetConstMappedRange((int)offset, (int)size, bufferAddress);
    */
    private static native void internal_native_getConstMappedRange(long this_addr, int offset, int size, ByteBuffer out);

    public WGPUBuffer() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*
      [-JNI;-NATIVE]
      return (jlong)new JGPU::WGPUBuffer();
    */
    public static native long internal_native_create();

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUBuffer* nativeObject = (JGPU::WGPUBuffer*)this_addr;
      delete nativeObject;
    */
    public static native void internal_native_deleteNative(long this_addr);

    public void setLabel(String value) {
        internal_native_SetLabel(native_address, value);
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUBuffer* nativeObject = (JGPU::WGPUBuffer*)this_addr;
      nativeObject->SetLabel(value);
    */
    public static native void internal_native_SetLabel(long this_addr, String value);

    public void release() {
        internal_native_Release(native_address);
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUBuffer* nativeObject = (JGPU::WGPUBuffer*)this_addr;
      nativeObject->Release();
    */
    public static native void internal_native_Release(long this_addr);

    public void destroy() {
        internal_native_Destroy(native_address);
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUBuffer* nativeObject = (JGPU::WGPUBuffer*)this_addr;
      nativeObject->Destroy();
    */
    public static native void internal_native_Destroy(long this_addr);

    public WGPUFuture mapAsync(WGPUMapMode mode, int offset, int size, WGPUCallbackMode callbackMode, WGPUBufferMapCallback callback) {
        long pointer = internal_native_MapAsync(native_address, mode.getValue(), offset, size, callbackMode.getValue(), callback.native_address);
        if (pointer == 0)
            return WGPUFuture.NULL;
        if (WGPUFuture_TEMP_GEN_0 == null)
            WGPUFuture_TEMP_GEN_0 = WGPUFuture.native_new();
        WGPUFuture_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUFuture_TEMP_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUBuffer* nativeObject = (JGPU::WGPUBuffer*)this_addr;
      static JGPU::WGPUFuture copy_addr;
      copy_addr = nativeObject->MapAsync((::WGPUMapMode)mode, (int)offset, (int)size, (::WGPUCallbackMode)callbackMode, (JGPU::WGPUBufferMapCallback* )callback_addr);
      return (jlong)&copy_addr;
    */
    public static native long internal_native_MapAsync(long this_addr, long mode, int offset, int size, long callbackMode, long callback_addr);

    public WGPUByteBuffer getMappedRange(int offset, int size) {
        long pointer = internal_native_GetMappedRange(native_address, offset, size);
        if (pointer == 0)
            return WGPUByteBuffer.NULL;
        if (WGPUByteBuffer_TEMP_GEN_0 == null)
            WGPUByteBuffer_TEMP_GEN_0 = WGPUByteBuffer.native_new();
        WGPUByteBuffer_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUByteBuffer_TEMP_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUBuffer* nativeObject = (JGPU::WGPUBuffer*)this_addr;
      return (jlong)&nativeObject->GetMappedRange((int)offset, (int)size);
    */
    public static native long internal_native_GetMappedRange(long this_addr, int offset, int size);

    public void unmap() {
        internal_native_Unmap(native_address);
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUBuffer* nativeObject = (JGPU::WGPUBuffer*)this_addr;
      nativeObject->Unmap();
    */
    public static native void internal_native_Unmap(long this_addr);

    public int getSize() {
        return internal_native_GetSize(native_address);
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUBuffer* nativeObject = (JGPU::WGPUBuffer*)this_addr;
      return nativeObject->GetSize();
    */
    public static native int internal_native_GetSize(long this_addr);

    public WGPUBufferUsage getUsage() {
        int value = internal_native_GetUsage(native_address);
        return WGPUBufferUsage.MAP.get(value);
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUBuffer* nativeObject = (JGPU::WGPUBuffer*)this_addr;
      return (int)nativeObject->GetUsage();
    */
    public static native int internal_native_GetUsage(long this_addr);

    public boolean isValid() {
        return internal_native_IsValid(native_address);
    }

    /*
      [-JNI;-NATIVE]
      JGPU::WGPUBuffer* nativeObject = (JGPU::WGPUBuffer*)this_addr;
      return nativeObject->IsValid();
    */
    public static native boolean internal_native_IsValid(long this_addr);
}
