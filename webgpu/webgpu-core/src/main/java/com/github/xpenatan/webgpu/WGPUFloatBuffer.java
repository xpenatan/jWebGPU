/*
  -------------------------------------------------------
   This file was generated by JParser
 
   Do not make changes to this file
  -------------------------------------------------------
*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.jParser.idl.IDLBase;

public class WGPUFloatBuffer extends IDLBase {

    private WGPUByteBuffer WGPUByteBuffer_TEMP_GEN_0;

    public final static WGPUFloatBuffer NULL;

    static {
        NULL = native_new();
    }

    public static WGPUFloatBuffer native_new() {
        return new WGPUFloatBuffer((byte) 0, (char) 0);
    }

    private WGPUFloatBuffer(byte b, char c) {
    }

    public void put(float[] values, int offset, int size) {
        internal_put(native_address, values, offset, size);
    }

    /*
      [-JNI;-NATIVE]
              WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
              jfloat* criticalArray = (jfloat*)env->GetPrimitiveArrayCritical(values, nullptr);
              nativeObject->put(criticalArray, offset, size);
              env->ReleasePrimitiveArrayCritical(values, criticalArray, 0);
    */
    private static native void internal_put(long this_addr, float[] values, int offset, int size);

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      delete nativeObject;
    */
    public static native void internal_native_deleteNative(long this_addr);

    public WGPUByteBuffer getByteBuffer() {
        long pointer = internal_native_getByteBuffer(native_address);
        if (pointer == 0)
            return WGPUByteBuffer.NULL;
        if (WGPUByteBuffer_TEMP_GEN_0 == null)
            WGPUByteBuffer_TEMP_GEN_0 = WGPUByteBuffer.native_new();
        WGPUByteBuffer_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUByteBuffer_TEMP_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      return (jlong)&nativeObject->getByteBuffer();
    */
    public static native long internal_native_getByteBuffer(long this_addr);

    public void put(float value) {
        internal_native_put__0(native_address, value);
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      nativeObject->put((float)value);
    */
    public static native void internal_native_put__0(long this_addr, float value);

    public void put(int index, float value) {
        internal_native_put__1(native_address, index, value);
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      nativeObject->put((int)index, (float)value);
    */
    public static native void internal_native_put__1(long this_addr, int index, float value);

    public float get(int index) {
        return internal_native_get(native_address, index);
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      return nativeObject->get((int)index);
    */
    public static native float internal_native_get(long this_addr, int index);

    public float get() {
        return internal_native_get(native_address);
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      return nativeObject->get();
    */
    public static native float internal_native_get(long this_addr);

    public int remaining() {
        return internal_native_remaining(native_address);
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      return nativeObject->remaining();
    */
    public static native int internal_native_remaining(long this_addr);

    public int getCapacity() {
        return internal_native_getCapacity(native_address);
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      return nativeObject->getCapacity();
    */
    public static native int internal_native_getCapacity(long this_addr);

    public void clear() {
        internal_native_clear(native_address);
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      nativeObject->clear();
    */
    public static native void internal_native_clear(long this_addr);

    public void limit(int newLimit) {
        internal_native_limit(native_address, newLimit);
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      nativeObject->limit((int)newLimit);
    */
    public static native void internal_native_limit(long this_addr, int newLimit);

    public int getLimit() {
        return internal_native_getLimit(native_address);
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      return nativeObject->getLimit();
    */
    public static native int internal_native_getLimit(long this_addr);

    public void position(int newPosition) {
        internal_native_position(native_address, newPosition);
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      nativeObject->position((int)newPosition);
    */
    public static native void internal_native_position(long this_addr, int newPosition);

    public int getPosition() {
        return internal_native_getPosition(native_address);
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      return nativeObject->getPosition();
    */
    public static native int internal_native_getPosition(long this_addr);

    public void flip() {
        internal_native_flip(native_address);
    }

    /*
      [-JNI;-NATIVE]
      WGPUFloatBuffer* nativeObject = (WGPUFloatBuffer*)this_addr;
      nativeObject->flip();
    */
    public static native void internal_native_flip(long this_addr);
}
