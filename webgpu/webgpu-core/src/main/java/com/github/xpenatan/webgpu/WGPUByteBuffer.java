/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.jParser.idl.IDLBase;

public class WGPUByteBuffer extends IDLBase {

    static private WGPUByteBuffer WGPUByteBuffer_TEMP_STATIC_GEN_0;

    private WGPUFloatBuffer WGPUFloatBuffer_TEMP_GEN_0;

    private WGPUIntBuffer WGPUIntBuffer_TEMP_GEN_0;

    private WGPULongBuffer WGPULongBuffer_TEMP_GEN_0;

    private WGPUShortBuffer WGPUShortBuffer_TEMP_GEN_0;

    static public final WGPUByteBuffer NULL = WGPUByteBuffer.native_new();

    public WGPUByteBuffer(int capacity) {
        long addr = internal_native_create_int(capacity);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new WGPUByteBuffer((int)capacity);
*/
    public static native long internal_native_create_int(int capacity);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUByteBuffer(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUByteBuffer native_new() {
        return new WGPUByteBuffer((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public static WGPUByteBuffer obtain(int capacity) {
        long pointer = internal_native_Obtain(capacity);
        if (pointer == 0)
            return WGPUByteBuffer.NULL;
        if (WGPUByteBuffer_TEMP_STATIC_GEN_0 == null)
            WGPUByteBuffer_TEMP_STATIC_GEN_0 = WGPUByteBuffer.native_new();
        WGPUByteBuffer_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPUByteBuffer_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)WGPUByteBuffer::Obtain((int)capacity);
*/
    public static native long internal_native_Obtain(int capacity);

    public void order(WGPUByteOrder order) {
        internal_native_order(native_address, order.getValue());
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
nativeObject->order((::WGPUByteOrder)order);
*/
    public static native void internal_native_order(long this_addr, long order);

    public byte get(int index) {
        return internal_native_get(native_address, index);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
return nativeObject->get((int)index);
*/
    public static native byte internal_native_get(long this_addr, int index);

    public void put(byte value) {
        internal_native_put__0(native_address, value);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
nativeObject->put(value);
*/
    public static native void internal_native_put__0(long this_addr, byte value);

    public void put(int index, byte value) {
        internal_native_put__1(native_address, index, value);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
nativeObject->put((int)index, value);
*/
    public static native void internal_native_put__1(long this_addr, int index, byte value);

    public byte get() {
        return internal_native_get(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
return nativeObject->get();
*/
    public static native byte internal_native_get(long this_addr);

    public void putInt(int byteIndex, int value) {
        internal_native_putInt(native_address, byteIndex, value);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
nativeObject->putInt((int)byteIndex, (int)value);
*/
    public static native void internal_native_putInt(long this_addr, int byteIndex, int value);

    public int getInt(int byteIndex) {
        return internal_native_getInt(native_address, byteIndex);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
return nativeObject->getInt((int)byteIndex);
*/
    public static native int internal_native_getInt(long this_addr, int byteIndex);

    public void putFloat(int byteIndex, float value) {
        internal_native_putFloat(native_address, byteIndex, value);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
nativeObject->putFloat((int)byteIndex, (float)value);
*/
    public static native void internal_native_putFloat(long this_addr, int byteIndex, float value);

    public float getFloat(int byteIndex) {
        return internal_native_getFloat(native_address, byteIndex);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
return nativeObject->getFloat((int)byteIndex);
*/
    public static native float internal_native_getFloat(long this_addr, int byteIndex);

    public int remaining() {
        return internal_native_remaining(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
return nativeObject->remaining();
*/
    public static native int internal_native_remaining(long this_addr);

    public int getCapacity() {
        return internal_native_getCapacity(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
return nativeObject->getCapacity();
*/
    public static native int internal_native_getCapacity(long this_addr);

    public void position(int newPosition) {
        internal_native_position(native_address, newPosition);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
nativeObject->position((int)newPosition);
*/
    public static native void internal_native_position(long this_addr, int newPosition);

    public int getPosition() {
        return internal_native_getPosition(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
return nativeObject->getPosition();
*/
    public static native int internal_native_getPosition(long this_addr);

    public void limit(int newLimit) {
        internal_native_limit(native_address, newLimit);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
nativeObject->limit((int)newLimit);
*/
    public static native void internal_native_limit(long this_addr, int newLimit);

    public int getLimit() {
        return internal_native_getLimit(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
return nativeObject->getLimit();
*/
    public static native int internal_native_getLimit(long this_addr);

    public void clear() {
        internal_native_clear(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
nativeObject->clear();
*/
    public static native void internal_native_clear(long this_addr);

    public void flip() {
        internal_native_flip(native_address);
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
nativeObject->flip();
*/
    public static native void internal_native_flip(long this_addr);

    public WGPUFloatBuffer asFloatBuffer() {
        long pointer = internal_native_asFloatBuffer(native_address);
        if (pointer == 0)
            return WGPUFloatBuffer.NULL;
        if (WGPUFloatBuffer_TEMP_GEN_0 == null)
            WGPUFloatBuffer_TEMP_GEN_0 = WGPUFloatBuffer.native_new();
        WGPUFloatBuffer_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUFloatBuffer_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
return (jlong)&nativeObject->asFloatBuffer();
*/
    public static native long internal_native_asFloatBuffer(long this_addr);

    public WGPUIntBuffer asIntBuffer() {
        long pointer = internal_native_asIntBuffer(native_address);
        if (pointer == 0)
            return WGPUIntBuffer.NULL;
        if (WGPUIntBuffer_TEMP_GEN_0 == null)
            WGPUIntBuffer_TEMP_GEN_0 = WGPUIntBuffer.native_new();
        WGPUIntBuffer_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUIntBuffer_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
return (jlong)&nativeObject->asIntBuffer();
*/
    public static native long internal_native_asIntBuffer(long this_addr);

    public WGPULongBuffer asLongBuffer() {
        long pointer = internal_native_asLongBuffer(native_address);
        if (pointer == 0)
            return WGPULongBuffer.NULL;
        if (WGPULongBuffer_TEMP_GEN_0 == null)
            WGPULongBuffer_TEMP_GEN_0 = WGPULongBuffer.native_new();
        WGPULongBuffer_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPULongBuffer_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
return (jlong)&nativeObject->asLongBuffer();
*/
    public static native long internal_native_asLongBuffer(long this_addr);

    public WGPUShortBuffer asShortBuffer() {
        long pointer = internal_native_asShortBuffer(native_address);
        if (pointer == 0)
            return WGPUShortBuffer.NULL;
        if (WGPUShortBuffer_TEMP_GEN_0 == null)
            WGPUShortBuffer_TEMP_GEN_0 = WGPUShortBuffer.native_new();
        WGPUShortBuffer_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUShortBuffer_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
WGPUByteBuffer* nativeObject = (WGPUByteBuffer*)this_addr;
return (jlong)&nativeObject->asShortBuffer();
*/
    public static native long internal_native_asShortBuffer(long this_addr);
}
