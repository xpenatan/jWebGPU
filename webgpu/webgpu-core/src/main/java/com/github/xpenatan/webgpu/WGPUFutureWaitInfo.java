/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUFutureWaitInfo extends IDLBase {

    static private WGPUFutureWaitInfo WGPUFutureWaitInfo_TEMP_STATIC_GEN_0;

    static public final WGPUFutureWaitInfo NULL = WGPUFutureWaitInfo.native_new();

    static public final WGPUFutureWaitInfo T_01 = WGPUFutureWaitInfo.native_new();

    static public final WGPUFutureWaitInfo T_02 = WGPUFutureWaitInfo.native_new();

    static public final WGPUFutureWaitInfo T_03 = WGPUFutureWaitInfo.native_new();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUFutureWaitInfo(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUFutureWaitInfo native_new() {
        return new WGPUFutureWaitInfo((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUFutureWaitInfo* nativeObject = (JGPU::WGPUFutureWaitInfo*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public static WGPUFutureWaitInfo obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return null;
        if (WGPUFutureWaitInfo_TEMP_STATIC_GEN_0 == null)
            WGPUFutureWaitInfo_TEMP_STATIC_GEN_0 = WGPUFutureWaitInfo.native_new();
        WGPUFutureWaitInfo_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPUFutureWaitInfo_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)JGPU::WGPUFutureWaitInfo::Obtain();
*/
    public static native long internal_native_Obtain();

    public void setFuture(WGPUFuture future) {
        internal_native_SetFuture(native_address, future.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUFutureWaitInfo* nativeObject = (JGPU::WGPUFutureWaitInfo*)this_addr;
nativeObject->SetFuture((JGPU::WGPUFuture* )future_addr);
*/
    public static native void internal_native_SetFuture(long this_addr, long future_addr);
}
