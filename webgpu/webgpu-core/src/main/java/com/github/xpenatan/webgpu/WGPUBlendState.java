/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPUBlendState extends IDLBase {

    static private WGPUBlendState WGPUBlendState_TEMP_STATIC_GEN_0;

    private WGPUBlendComponent WGPUBlendComponent_TEMP_GEN_0;

    private WGPUBlendComponent WGPUBlendComponent_TEMP_GEN_1;

    static public final WGPUBlendState NULL = WGPUBlendState.native_new();

    static public final WGPUBlendState T_01 = WGPUBlendState.native_new();

    static public final WGPUBlendState T_02 = WGPUBlendState.native_new();

    static public final WGPUBlendState T_03 = WGPUBlendState.native_new();

    public WGPUBlendState() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPUBlendState();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPUBlendState(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPUBlendState native_new() {
        return new WGPUBlendState((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUBlendState* nativeObject = (JGPU::WGPUBlendState*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public static WGPUBlendState obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return null;
        if (WGPUBlendState_TEMP_STATIC_GEN_0 == null)
            WGPUBlendState_TEMP_STATIC_GEN_0 = WGPUBlendState.native_new();
        WGPUBlendState_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPUBlendState_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)JGPU::WGPUBlendState::Obtain();
*/
    public static native long internal_native_Obtain();

    public WGPUBlendComponent getColor() {
        long pointer = internal_native_GetColor(native_address);
        if (pointer == 0)
            return null;
        if (WGPUBlendComponent_TEMP_GEN_0 == null)
            WGPUBlendComponent_TEMP_GEN_0 = WGPUBlendComponent.native_new();
        WGPUBlendComponent_TEMP_GEN_0.internal_reset(pointer, false);
        return WGPUBlendComponent_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUBlendState* nativeObject = (JGPU::WGPUBlendState*)this_addr;
static JGPU::WGPUBlendComponent copy_addr;
copy_addr = nativeObject->GetColor();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetColor(long this_addr);

    public WGPUBlendComponent getAlpha() {
        long pointer = internal_native_GetAlpha(native_address);
        if (pointer == 0)
            return null;
        if (WGPUBlendComponent_TEMP_GEN_1 == null)
            WGPUBlendComponent_TEMP_GEN_1 = WGPUBlendComponent.native_new();
        WGPUBlendComponent_TEMP_GEN_1.internal_reset(pointer, false);
        return WGPUBlendComponent_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
JGPU::WGPUBlendState* nativeObject = (JGPU::WGPUBlendState*)this_addr;
static JGPU::WGPUBlendComponent copy_addr;
copy_addr = nativeObject->GetAlpha();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetAlpha(long this_addr);
}
