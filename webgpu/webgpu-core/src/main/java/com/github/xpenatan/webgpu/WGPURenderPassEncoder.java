/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package com.github.xpenatan.webgpu;

import com.github.xpenatan.webgpu.idl.IDLBase;

public class WGPURenderPassEncoder extends IDLBase {

    static private WGPURenderPassEncoder WGPURenderPassEncoder_TEMP_STATIC_GEN_0;

    static public final WGPURenderPassEncoder NULL = WGPURenderPassEncoder.native_new();

    static public final WGPURenderPassEncoder T_01 = WGPURenderPassEncoder.native_new();

    static public final WGPURenderPassEncoder T_02 = WGPURenderPassEncoder.native_new();

    static public final WGPURenderPassEncoder T_03 = WGPURenderPassEncoder.native_new();

    public WGPURenderPassEncoder() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new JGPU::WGPURenderPassEncoder();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    protected WGPURenderPassEncoder(byte b, char c) {
    }

    /**
     * @return An empty instance without a native address
     */
    public static WGPURenderPassEncoder native_new() {
        return new WGPURenderPassEncoder((byte) 0, (char) 0);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public static WGPURenderPassEncoder obtain() {
        long pointer = internal_native_Obtain();
        if (pointer == 0)
            return null;
        if (WGPURenderPassEncoder_TEMP_STATIC_GEN_0 == null)
            WGPURenderPassEncoder_TEMP_STATIC_GEN_0 = WGPURenderPassEncoder.native_new();
        WGPURenderPassEncoder_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return WGPURenderPassEncoder_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
return (jlong)JGPU::WGPURenderPassEncoder::Obtain();
*/
    public static native long internal_native_Obtain();

    public void release() {
        internal_native_Release(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->Release();
*/
    public static native void internal_native_Release(long this_addr);

    public void end() {
        internal_native_End(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->End();
*/
    public static native void internal_native_End(long this_addr);

    public void setPipeline(WGPURenderPipeline renderPipeline) {
        internal_native_SetPipeline(native_address, renderPipeline.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->SetPipeline((JGPU::WGPURenderPipeline* )renderPipeline_addr);
*/
    public static native void internal_native_SetPipeline(long this_addr, long renderPipeline_addr);

    public void beginOcclusionQuery(int queryIndex) {
        internal_native_BeginOcclusionQuery(native_address, queryIndex);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->BeginOcclusionQuery((int)queryIndex);
*/
    public static native void internal_native_BeginOcclusionQuery(long this_addr, int queryIndex);

    public void draw(int vertexCount, int instanceCount, int firstVertex, int firstInstance) {
        internal_native_Draw(native_address, vertexCount, instanceCount, firstVertex, firstInstance);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->Draw((int)vertexCount, (int)instanceCount, (int)firstVertex, (int)firstInstance);
*/
    public static native void internal_native_Draw(long this_addr, int vertexCount, int instanceCount, int firstVertex, int firstInstance);

    public void drawIndexed(int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance) {
        internal_native_DrawIndexed(native_address, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->DrawIndexed((int)indexCount, (int)instanceCount, (int)firstIndex, (int)baseVertex, (int)firstInstance);
*/
    public static native void internal_native_DrawIndexed(long this_addr, int indexCount, int instanceCount, int firstIndex, int baseVertex, int firstInstance);

    public void drawIndexedIndirect(WGPUBuffer indirectBuffer, int indirectOffset) {
        internal_native_DrawIndexedIndirect(native_address, indirectBuffer.native_address, indirectOffset);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->DrawIndexedIndirect((JGPU::WGPUBuffer* )indirectBuffer_addr, (int)indirectOffset);
*/
    public static native void internal_native_DrawIndexedIndirect(long this_addr, long indirectBuffer_addr, int indirectOffset);

    public void drawIndirect(WGPUBuffer indirectBuffer, int indirectOffset) {
        internal_native_DrawIndirect(native_address, indirectBuffer.native_address, indirectOffset);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->DrawIndirect((JGPU::WGPUBuffer* )indirectBuffer_addr, (int)indirectOffset);
*/
    public static native void internal_native_DrawIndirect(long this_addr, long indirectBuffer_addr, int indirectOffset);

    public void endOcclusionQuery() {
        internal_native_EndOcclusionQuery(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->EndOcclusionQuery();
*/
    public static native void internal_native_EndOcclusionQuery(long this_addr);

    public void executeBundles(WGPUVectorRenderBundle bundles) {
        internal_native_ExecuteBundles(native_address, bundles.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->ExecuteBundles((JGPU::WGPUVectorRenderBundle* )bundles_addr);
*/
    public static native void internal_native_ExecuteBundles(long this_addr, long bundles_addr);

    public void insertDebugMarker(String value) {
        internal_native_InsertDebugMarker(native_address, value);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->InsertDebugMarker(value);
*/
    public static native void internal_native_InsertDebugMarker(long this_addr, String value);

    public void popDebugGroup() {
        internal_native_PopDebugGroup(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->PopDebugGroup();
*/
    public static native void internal_native_PopDebugGroup(long this_addr);

    public void pushDebugGroup(String value) {
        internal_native_PushDebugGroup(native_address, value);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->PushDebugGroup(value);
*/
    public static native void internal_native_PushDebugGroup(long this_addr, String value);

    public void setBindGroup(int groupIndex, WGPUBindGroup group, WGPUVectorInt dynamicOffsets) {
        internal_native_SetBindGroup(native_address, groupIndex, group.native_address, dynamicOffsets.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->SetBindGroup((int)groupIndex, (JGPU::WGPUBindGroup* )group_addr, (JGPU::WGPUVectorInt* )dynamicOffsets_addr);
*/
    public static native void internal_native_SetBindGroup(long this_addr, int groupIndex, long group_addr, long dynamicOffsets_addr);

    public void setBindGroup(int groupIndex, WGPUBindGroup group) {
        internal_native_SetBindGroup(native_address, groupIndex, group.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->SetBindGroup((int)groupIndex, (JGPU::WGPUBindGroup* )group_addr);
*/
    public static native void internal_native_SetBindGroup(long this_addr, int groupIndex, long group_addr);

    public void setBlendConstant(WGPUColor color) {
        internal_native_SetBlendConstant(native_address, color.native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->SetBlendConstant((JGPU::WGPUColor* )color_addr);
*/
    public static native void internal_native_SetBlendConstant(long this_addr, long color_addr);

    public void setIndexBuffer(WGPUBuffer buffer, WGPUIndexFormat format, int offset, int size) {
        internal_native_SetIndexBuffer(native_address, buffer.native_address, format.getValue(), offset, size);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->SetIndexBuffer((JGPU::WGPUBuffer* )buffer_addr, (::WGPUIndexFormat)format, (int)offset, (int)size);
*/
    public static native void internal_native_SetIndexBuffer(long this_addr, long buffer_addr, long format, int offset, int size);

    public void setLabel(String value) {
        internal_native_SetLabel(native_address, value);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->SetLabel(value);
*/
    public static native void internal_native_SetLabel(long this_addr, String value);

    public void setScissorRect(int x, int y, int width, int height) {
        internal_native_SetScissorRect(native_address, x, y, width, height);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->SetScissorRect((int)x, (int)y, (int)width, (int)height);
*/
    public static native void internal_native_SetScissorRect(long this_addr, int x, int y, int width, int height);

    public void setStencilReference(int reference) {
        internal_native_SetStencilReference(native_address, reference);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->SetStencilReference((int)reference);
*/
    public static native void internal_native_SetStencilReference(long this_addr, int reference);

    public void setVertexBuffer(int slot, WGPUBuffer buffer, int offset, int size) {
        internal_native_SetVertexBuffer(native_address, slot, buffer.native_address, offset, size);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->SetVertexBuffer((int)slot, (JGPU::WGPUBuffer* )buffer_addr, (int)offset, (int)size);
*/
    public static native void internal_native_SetVertexBuffer(long this_addr, int slot, long buffer_addr, int offset, int size);

    public void setViewport(float x, float y, float width, float height, float minDepth, float maxDepth) {
        internal_native_SetViewport(native_address, x, y, width, height, minDepth, maxDepth);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->SetViewport((float)x, (float)y, (float)width, (float)height, (float)minDepth, (float)maxDepth);
*/
    public static native void internal_native_SetViewport(long this_addr, float x, float y, float width, float height, float minDepth, float maxDepth);

    public void addRef() {
        internal_native_AddRef(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
nativeObject->AddRef();
*/
    public static native void internal_native_AddRef(long this_addr);

    public boolean isValid() {
        return internal_native_IsValid(native_address);
    }

    /*[-JNI;-NATIVE]
JGPU::WGPURenderPassEncoder* nativeObject = (JGPU::WGPURenderPassEncoder*)this_addr;
return nativeObject->IsValid();
*/
    public static native boolean internal_native_IsValid(long this_addr);
}
